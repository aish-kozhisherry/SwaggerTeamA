{
  "openapi": "3.0.1",
  "info": {
    "title": "Dash API 1 1 1",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://stg.api.realogyfg.com/dashapi"
    },
    {
      "url": "https://stgrfgbtt.azure-api.net/dashapi"
    }
  ],
  "paths": {
    "/batches": {
      "post": {
        "tags": [
          "Batches"
        ],
        "summary": "Batches_Post",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#POSTBATCH').toggle();\" />\r\n  <div id=\"POSTBATCH\">\r\n    <ul>\r\n      <li>This method will be used to submit any entity - Transaction or Listing or Staff or Team or Office (only Marketing information for Domestic offices) or Company in batches</li>\r\n      <li>The data should be submitted as an xml file passed in the content on the REST API HTTP Post Request</li>\r\n      <li>The XSD Schema format for each entity should be as below (click on each entity to see the xsd):</li>\r\n      <ul>\r\n        <li>\r\n          <a href=\"https://devopenapi.blob.core.windows.net/spec/dashImportSpecCompany.xsd\" target=\"_blank\">Company</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"https://devopenapi.blob.core.windows.net/spec/dashImportSpecOffice.xsd\" target=\"_blank\">Office (only for International)</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"https://devopenapi.blob.core.windows.net/spec/dashImportSpecMarketingOffice.xsd\" target=\"_blank\">Office Marketing Information</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"https://devopenapi.blob.core.windows.net/spec/dashImportSpecCompanyStaff.zip\" target=\"_blank\">Person</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"https://devopenapi.blob.core.windows.net/spec/dashImportSpecTeam.zip\" target=\"_blank\">Team</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"https://devopenapi.blob.core.windows.net/spec/dashResidentialSaleListing.zip\" target=\"_blank\">Residential Sale Listing</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"https://devopenapi.blob.core.windows.net/spec/dashCommercialSaleListing.zip\" target=\"_blank\">Commercial Sale Listing</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"https://devopenapi.blob.core.windows.net/spec/dashResidentialRentalListing.zip\" target=\"_blank\">Residential Rental Listing</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"https://devopenapi.blob.core.windows.net/spec/dashTransactionSale.zip\" target=\"_blank\">Sale Transaction</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"https://devopenapi.blob.core.windows.net/spec/dashTransactionOtherIncome.zip\" target=\"_blank\">OtherIncome Transaction</a>\r\n        </li>\r\n      </ul>\r\n      <li>The business rule for each entity will remain the same as the individual synchronous methods</li>\r\n      <li>This method will return a Resource URL (with the Batch ID) and the status of the batch can be obtained using the URL</li>\r\n    </ul>\r\n  </div>\r\n</remarks>",
        "operationId": "Batches_Post",
        "parameters": [
          {
            "name": "entityType",
            "in": "query",
            "description": "This parameter represents the Entity Type for which the batch file is being submitted. It can be Company, Office, OfficeMarketing, CompanyStaff, Team, ResidentialSaleListing, CommercialSaleListing, ResidentialRentalListing, SaleTransaction and OtherIncomeTransaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaVersion",
            "in": "query",
            "description": "This parameter represents the Schema Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/batches/{batchId}": {
      "get": {
        "tags": [
          "Batches"
        ],
        "summary": "Batches_Get",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#GETBATCH').toggle();\" />\r\n  <div id=\"GETBATCH\">\r\n    <ul>\r\n      <li>This method will be used to get the status of the submitted entities for a given batch by supplying the batch id</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>If Batch ID supplied does not exists in our system, API will return �HTTP 404 - Not Found� status code</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Batches_Get",
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "Format - int32. This parameter represents the Batch ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/codevalues": {
      "get": {
        "tags": [
          "CodeValues"
        ],
        "summary": "CodeValues_Search",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#GCBC').toggle();\" />\r\n  <div id=\"GCBC\">\r\n    <ul>\r\n      <li>This method will be used to retrieve the code values for a category by supplying the category name</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CodeValues_Search",
        "parameters": [
          {
            "name": "brand",
            "in": "query",
            "description": "This parameter represents the Brand Code",
            "required": true,
            "schema": {
              "enum": [
                "BHG",
                "C21",
                "CB",
                "CBC",
                "ERA",
                "SIR",
                "ZAP",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "categoryName",
            "in": "query",
            "description": "This parameter represents the Category Name for which the code values need to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/codevalues/features": {
      "get": {
        "tags": [
          "CodeValues"
        ],
        "summary": "CodeValues_SearchFeatures",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#GF').toggle();\" />\r\n  <div id=\"GF\">\r\n    <ul>\r\n      <li>This method will be used to retrieve the features for a feature category (can be Listing or Property)</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CodeValues_SearchFeatures",
        "parameters": [
          {
            "name": "brand",
            "in": "query",
            "description": "This parameter represents the Brand Code",
            "required": true,
            "schema": {
              "enum": [
                "BHG",
                "C21",
                "CB",
                "CBC",
                "ERA",
                "SIR",
                "ZAP",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "featureCategory",
            "in": "query",
            "description": "This parameter represents the Feature Category for which the features need to be retrieved. Feature Category can be Listing or Property",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/codevalues/propertystyles": {
      "get": {
        "tags": [
          "CodeValues"
        ],
        "summary": "CodeValues_SearchPropertyStyles",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#GPS').toggle();\" />\r\n  <div id=\"GPS\">\r\n    <ul>\r\n      <li>This method will be used to retrieve the Property Styles for a supplied Property Subtype</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CodeValues_SearchPropertyStyles",
        "parameters": [
          {
            "name": "brand",
            "in": "query",
            "description": "This parameter represents the Brand Code",
            "required": true,
            "schema": {
              "enum": [
                "BHG",
                "C21",
                "CB",
                "CBC",
                "ERA",
                "SIR",
                "ZAP",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "propertySubtype",
            "in": "query",
            "description": "This parameter represents the Property Sub Type for which the styles need to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/consumer/listings/commercialleases/{listingGuid}": {
      "get": {
        "tags": [
          "CommercialLeaseListings"
        ],
        "summary": "CommercialLeaseListings_GetConsumer",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#CLGETC').toggle();\" />\r\n  <div id=\"CLGETC\">\r\n    <ul>\r\n      <li>This method is to get the Commercial Lease Listing details by passing ListingGUID</li>\r\n      <li>This method will be called after a delta call to get details on the updated listings or after adding a new listing.</li>\r\n      <li>This action will return only Available listings.</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>If a Commercial Lease Listing does not exists in our system for the Listing GUID provided, the method will return �HTTP 404 - Not Found� error</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CommercialLeaseListings_GetConsumer",
        "parameters": [
          {
            "name": "listingGuid",
            "in": "path",
            "description": "Format - uuid. This parameter represents the Listing GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/consumer/listings/commercialsales/{listingGuid}": {
      "get": {
        "tags": [
          "CommercialSaleListings"
        ],
        "summary": "CommercialSaleListings_GetConsumer",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#CSLGETC').toggle();\" />\r\n  <div id=\"CSLGETC\">\r\n    <ul>\r\n      <li>This method is to get the Commercial Sale Listing details by passing ListingGUID</li>\r\n      <li>This will be primarily called as a result of a delta call or after adding a new Listing</li>\r\n      <li>This action will return only active/pending listings</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>If a Commercial Sale Listing does not exists in our system for the Listing GUID provided, the method will return �HTTP 404 - Not Found� error</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CommercialSaleListings_GetConsumer",
        "parameters": [
          {
            "name": "listingGuid",
            "in": "path",
            "description": "Format - uuid. This parameter represents the Listing GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/listings/commercialsales/{id}": {
      "get": {
        "tags": [
          "CommercialSaleListings"
        ],
        "summary": "CommercialSaleListings_Get",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#CSLGET').toggle();\" />\r\n  <div id=\"CSLGET\">\r\n    <ul>\r\n      <li>This method is to get the Commercial Sale Listing details by passing Listing GUID or ProviderIdentifier</li>\r\n      <li>This will be primarily called as a result of a delta call or after adding a new Listing</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>The parameter - idType is mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id should be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>If a Commercial Sale Listing does not exists in our system for the Listing GUID provided, the method will return �HTTP 404 - Not Found� error</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CommercialSaleListings_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the Listing. It can be either Listing GUID or Listing ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Listing GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CommercialSaleListings"
        ],
        "summary": "CommercialSaleListings_Put",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#CSLPUT').toggle();\" />\r\n  <div id=\"CSLPUT\">\r\n    <ul>\r\n      <li>This method will be used to update an existing Commercial Sale listing by using Listing GUID or ProviderIdentifier</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Mandatory Fields:</u>\r\n      </b>\r\n      <ul>\r\n        <li>Parameter - id (Listing GUID or ProviderIdentifier)</li>\r\n        <li>Property</li>\r\n        <ul>\r\n          <li>Location (Address of the property)</li>\r\n          <li>TypeCode or TypeDescription (type of the property)</li>\r\n          <li>PropertyName(only if brand is SIR)</li>\r\n        </ul>\r\n        <li>Listing</li>\r\n        <ul>\r\n          <li>Office</li>\r\n          <li>PrimaryMLS(only for domestic master franchises)</li>\r\n          <li>PrimaryAgent or Team</li>\r\n        </ul>\r\n        <li>ListPrice</li>\r\n        <li>Currency (Code or Name)</li>\r\n      </ul>\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All Mandatory fields must be supplied while adding/updating a Listing</li>\r\n        <li>The parameter - idType is mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id must be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>If a Commercial Sale Listing does not exists in our system for the Listing GUID provided, the method will return �HTTP 404 - Not Found� error</li>\r\n        <li>If YearRenovated is supplied, it must not be in the future and must not be before YearBuilt</li>\r\n        <li>Listing Office supplied must exist with an open/executed status</li>\r\n        <li>Agent supplied for the listing must exist</li>\r\n        <li>Team supplied for the listing must exist</li>\r\n        <li>Listing Remarks of type - Property Description in English is mandatory</li>\r\n        <li>Listing Remarks must only be with 1 Language/Remark Type combination </li>\r\n        <li>OpenHouse StartOn Date/Time must not be after the EndOn Date/Time</li>\r\n        <li>OpenHouse StartOn Date/Time and EndOn Date/Time is mandatory</li>\r\n        <li>OpenHouse Remarks must not have multiple records for the same language</li>\r\n        <li>Listing website(URL) cannot be duplicated for the same language and type</li>\r\n        <li>There must not be multiple Media Captions with the same language for each media item</li>\r\n        <li>Property type should not be Residential</li>\r\n        <li>If ExpiresOn date is supplied then it should be greater than ListedDate</li>\r\n        <li>If ClosedOn date is supplied then it should be greater than ListedDate and must not be in the future</li>\r\n        <li>ContractOn should be greater than ListedDate</li>\r\n        <li>Listing features must not have multiple records with same feature</li>\r\n        <li>LastSoldOn must not be in the future</li>\r\n        <li>Listing once closed cannot be revoked</li>\r\n        <li>ListPriceInUSD is a read-only field and is always auto-calculated based on ListPrice</li>\r\n        <li>The valid Listing Statuses that can be supplied are:</li>\r\n        <ul>\r\n          <li>Pre-Listing</li>\r\n          <li>Active</li>\r\n          <li>Expired</li>\r\n          <li>Withdrawn</li>\r\n          <li>Pending (only for Transaction NOT Enabled offices)</li>\r\n          <li>Closed (only for Transaction NOT Enabled offices)</li>\r\n        </ul>\r\n        <li>\r\n                While adding a listing, either the Status or equivalent dates or combination of Status and Dates can be supplied. <br />\r\n                If only Status is supplied, the dates will be defaulted/protected (if exists in our system). Dates defaulted (defaulted to current date) for each status is:\r\n                <ul><li>Pre-Listing</li><ul><li>ListedDated</li></ul><li>Active</li><ul><li>ListedDate</li></ul><li>Expired</li><ul><li>ListedDate</li><li>ExpiresOn</li></ul><li>Withdrawn</li><ul><li>ListedDate</li><li>WithdrawnOn</li></ul><li>Pending</li><ul><li>ListedDate</li><li>ContractOn</li><li>EstimatedClosedOn (will be current date + 90 days)</li></ul><li>Closed</li><ul><li>ListedDate</li><li>ContractOn</li><li>EstimatedClosedOn (will be current date + 90 days)</li><li>ClosedDate</li></ul></ul></li>\r\n        <li>If only dates are supplied, then the status will be derived based on the dates.</li>\r\n        <ul>\r\n          <li>ListedDate</li>\r\n          <ul>\r\n            <li>Active (If listed date is in the past)</li>\r\n            <li>Pre-Listing (If listed date is in the future)</li>\r\n          </ul>\r\n          <li>ExpiresOn (along with ListedDate)</li>\r\n          <ul>\r\n            <li>Active (If ExpiresOn is in the future)</li>\r\n            <li>Expired (If ExpiresOn is in the past)</li>\r\n          </ul>\r\n          <li>WithdrawnOn (along with ListedDate)</li>\r\n          <ul>\r\n            <li>Withdrawn</li>\r\n          </ul>\r\n          <li>ContractOn (along with ListedDate)</li>\r\n          <ul>\r\n            <li>Pending</li>\r\n          </ul>\r\n          <li>ClosedOn (along with ListedDate, ContractOn)</li>\r\n          <ul>\r\n            <li>Closed</li>\r\n          </ul>\r\n        </ul>\r\n        <li>If both status and dates are supplied, then the status and dates will be validated as below.</li>\r\n        <ul>\r\n          <li>Pre-Listing - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in future)</li>\r\n          </ul>\r\n          <li>Active - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in Past)</li>\r\n          </ul>\r\n          <li>Expired - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in Past)</li>\r\n            <li>ExpiresOn (in Past)</li>\r\n          </ul>\r\n          <li>Withdrawn - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in Past)</li>\r\n            <li>WithdrawnOn (in Past)</li>\r\n          </ul>\r\n          <li>Pending - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in Past)</li>\r\n            <li>ContractOn</li>\r\n          </ul>\r\n          <li>Closed - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in Past)</li>\r\n            <li>ContractOn</li>\r\n            <li>ClosedDate</li>\r\n          </ul>\r\n        </ul>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CommercialSaleListings_Put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the Listing. It can be either Listing GUID or Listing ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Listing GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This parameter represents the Commercial Sale Listing Details",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/listings/commercialsales": {
      "post": {
        "tags": [
          "CommercialSaleListings"
        ],
        "summary": "CommercialSaleListings_Post",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#CSLPOST').toggle();\" />\r\n  <div id=\"CSLPOST\">\r\n    <br />\r\n    <ul>\r\n      <li>This method will be used to add a new Commercial Sale listing to the system.</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <b>\r\n        <u>Mandatory Fields:</u>\r\n      </b>\r\n      <ul>\r\n        <li>Property</li>\r\n        <ul>\r\n          <li>Location (Address of the property)</li>\r\n          <li>TypeCode or TypeDescription (type of the property)</li>\r\n          <li>PropertyName(only if brand is SIR)</li>\r\n        </ul>\r\n        <li>Listing</li>\r\n        <ul>\r\n          <li>Office (Office GUID OR ProviderIdentifier (can be provided only by the office provider) OR Company ID &amp; Office ID)</li>\r\n          <li>ProviderIdentifier</li>\r\n          <li>PrimaryMLS(only for domestic master franchises)</li>\r\n          <li>PrimaryAgent or Team</li>\r\n        </ul>\r\n        <li>ListPrice</li>\r\n        <li>Currency (Code or Name)</li>\r\n      </ul>\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All the Mandatory fields must be supplied while adding/updating a Listing</li>\r\n        <li>If YearRenovated is supplied, it must not be in the future and must not be before YearBuilt</li>\r\n        <li>Listing Office supplied must exist with an open/executed status</li>\r\n        <li>Agent supplied for the listing must exist</li>\r\n        <li>Team supplied for the listing must exist</li>\r\n        <li>Listing Remarks of type - Property Description in English is mandatory</li>\r\n        <li>Listing Remarks must only be with 1 Language/Remark Type combination </li>\r\n        <li>OpenHouse StartOn Date/Time must not be after the EndOn Date/Time</li>\r\n        <li>OpenHouse StartOn Date/Time and EndOn Date/Time is mandatory</li>\r\n        <li>OpenHouse Remarks must not have multiple records for the same language</li>\r\n        <li>Listing website(URL) cannot be duplicated for the same language and type</li>\r\n        <li>There must not be multiple Media Captions with the same language for each media item</li>\r\n        <li>Property type should not be Residential</li>\r\n        <li>If ExpiresOn date is supplied then it should be greater than ListedDate</li>\r\n        <li>If ClosedOn date is supplied then it should be greater than ListedDate and must not be in the future</li>\r\n        <li>ContractOn should be greater than ListedDate</li>\r\n        <li>Listing features must not have multiple records with same feature</li>\r\n        <li>LastSoldOn must not be in the future</li>\r\n        <li>ListPriceInUSD is a read-only field and is always auto-calculated based on ListPrice</li>\r\n        <li>The valid Listing Statuses that can be supplied are:</li>\r\n        <ul>\r\n          <li>Pre-Listing</li>\r\n          <li>Active</li>\r\n          <li>Pending (only for Transaction NOT Enabled offices)</li>\r\n          <li>Closed (only for Transaction NOT Enabled offices)</li>\r\n        </ul>\r\n        <li>\r\n                While adding a listing, either the Status or equivalent dates or combination of Status and Dates can be supplied. <br />\r\n                If only Status is supplied, the dates will be defaulted. Dates defaulted (defaulted to current date) for each status is:\r\n                <ul><li>Pre-Listing</li><ul><li>ListedDate (will be current date + (X) days)</li></ul><li>Active</li><ul><li>ListedDate</li></ul><li>Pending</li><ul><li>ListedDate</li><li>ContractOn</li><li>EstimatedClosedOn (will be current date + 90 days)</li></ul><li>Closed</li><ul><li>ListedDate</li><li>ContractOn</li><li>EstimatedClosedOn (will be current date + 90 days)</li><li>ClosedDate</li></ul></ul></li>\r\n        <li>If only dates are supplied, then the status will be derived based on the dates.</li>\r\n        <ul>\r\n          <li>ListedDate</li>\r\n          <ul>\r\n            <li>Active (If listed date is in the past)</li>\r\n            <li>Pre-Listing (If listed date is in the future)</li>\r\n          </ul>\r\n          <li>ExpiresOn (along with ListedDate)</li>\r\n          <ul>\r\n            <li>Active (If ExpiresOn is in the future)</li>\r\n            <li>Expired (If ExpiresOn is in the past)</li>\r\n          </ul>\r\n          <li>ContractOn (along with ListedDate)</li>\r\n          <ul>\r\n            <li>Pending</li>\r\n          </ul>\r\n          <li>ClosedOn (along with ListedDate, ContractOn)</li>\r\n          <ul>\r\n            <li>Closed</li>\r\n          </ul>\r\n        </ul>\r\n        <li>If both status and dates are supplied, then the status and dates will be validated as below.</li>\r\n        <ul>\r\n          <li>Pre-Listing - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in future)</li>\r\n          </ul>\r\n          <li>Active - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in Past)</li>\r\n          </ul>\r\n          <li>Pending - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in Past)</li>\r\n            <li>ContractOn</li>\r\n          </ul>\r\n          <li>Closed - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in Past)</li>\r\n            <li>ContractOn</li>\r\n            <li>ClosedDate</li>\r\n          </ul>\r\n        </ul>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CommercialSaleListings_Post",
        "requestBody": {
          "description": "This parameter represents the Commercial Sale Listing Details",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/companies/{id}": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Companies_Get",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#CGET').toggle();\" />\r\n  <div id=\"CGET\">\r\n    <ul>\r\n      <li>This method is to get the Company details by passing Company GUID or RFG Company ID.</li>\r\n      <li>This will be primarily called as a result of a delta call.</li>\r\n      <li>The method will return only Active Companies</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>The parameter - idType is mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id should be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>If the idType supplied is 'rfgid', then the supplied id should be a numeric identifier</li>\r\n        <li>If Company GUID/RFG Company ID does not exist in our system, API will return �HTTP 404 - Not Found� status code.</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Companies_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the company. It can be either Company GUID or RFG Company ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. This can be either \"id\" or \"rfgid\"\r\nThe value should be set to \"id\" if Company GUID is provided as the identifier. \r\nIf the identifier provided is RFG Company ID, the idType should be \"rfgid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/companies/delta": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Companies_Delta",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#CDELTA').toggle();\" />\r\n  <div id=\"CDELTA\">\r\n    <ul>\r\n      <li>This method will be used to get the list of Companies which got updated over the specified period of time. This method will return list of Company GUIDs (if available) which are created or modified between fromDate and toDate.</li>\r\n      <li>The results can be filtered by brand or list of RFG Company IDs</li>\r\n      <li>The Date-Time format supported is standard date-time format (yyyy-MM-ddThh:mm:ss[.fffffff]). Example: 2015-02-13T06:40:48.937</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>FromDate is mandatory</li>\r\n        <li>If toDate is not supplied, system will take current system date</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Companies_Delta",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This parameter represents the Date from which the delta operation needs to be performed. <br />\r\nDataType: DateTime with offset (Standard formats allowed are - yyyy-MM-ddThh:mm:ss[.fffffff] zzz. Any DateTime without offset will be considered as Eastern Time)<br />\r\nExample: 2015-02-13T06:40:48.937-04:00",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This parameter represents the Date to which the delta operation needs to be performed. <br />\r\nDataType: DateTime with offset (Standard formats allowed are - yyyy-MM-ddThh:mm:ss[.fffffff] zzz. Any DateTime without offset will be considered as Eastern Time)<br />\r\nExample: 2015-02-13T06:40:48.937-04:00",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brandCode",
            "in": "query",
            "description": "This parameter represents the Brand Code",
            "schema": {
              "enum": [
                "BHG",
                "C21",
                "CB",
                "CBC",
                "ERA",
                "SIR",
                "ZAP",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyIds",
            "in": "query",
            "description": "This parameter represents the List of RFG Company IDs to be used for filtering the delta search results",
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "isLastUpdatedBy",
            "in": "query",
            "description": "If isLastUpdatedBy is true then Companies are displayed which are not updated by current user. If isLastUpdatedBy is false then all the Companies are displayed",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/consumer/companystaff/{companyStaffGuid}": {
      "get": {
        "tags": [
          "CompanyStaff"
        ],
        "summary": "CompanyStaff_GetConsumer",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#SGETC').toggle();\" />\r\n  <div id=\"SGETC\">\r\n    <ul>\r\n      <li>This method is to get the Staff details by passing CompanyStaffGUID</li>\r\n      <li>This will be primarily called as a result of a delta call or after adding a new Staff</li>\r\n      <li>This action will return only active staffs</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>If Staff GUID does not exists in our system, API will return �HTTP 404 - Not Found� status code.</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CompanyStaff_GetConsumer",
        "parameters": [
          {
            "name": "companyStaffGuid",
            "in": "path",
            "description": "Format - uuid. This parameter represents the Company Staff GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/companystaff/{id}": {
      "get": {
        "tags": [
          "CompanyStaff"
        ],
        "summary": "CompanyStaff_Get",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#SGET').toggle();\" />\r\n  <div id=\"SGET\">\r\n    <ul>\r\n      <li>This method is to get the Staff details by passing CompanyStaff GUID or ProviderIdentifier</li>\r\n      <li>This will be primarily called as a result of a delta call or after adding a new Staff</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>The parameter - idType is mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id should be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>If Staff GUID or ProviderIdentifier does not exists in our system, API will return �HTTP 404 - Not Found� status code.</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CompanyStaff_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the company staff. It can be either Company Staff GUID or Company Staff ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Company Staff GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/companystaff": {
      "post": {
        "tags": [
          "CompanyStaff"
        ],
        "summary": "CompanyStaff_Post",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#AddCS').toggle();\" />\r\n  <div id=\"AddCS\">\r\n    <br />\r\n    <ul>\r\n      <li>This method will be used to add a new staff (person) to the system.</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <b>\r\n        <u>Mandatory Fields:</u>\r\n      </b>\r\n      <ul>\r\n        <li>FirstName</li>\r\n        <li>LastName</li>\r\n        <li>PrimaryEmailAddress</li>\r\n        <li>Company (Company GUID OR ProviderIdentifier (can be provided only by the office provider) OR Company ID)</li>\r\n        <li>PrimaryOffice Office GUID OR ProviderIdentifier (can be provided only by the office provider) OR Company ID &amp; Office ID)</li>\r\n        <li>ProviderIdentifier</li>\r\n        <li>Roles</li>\r\n        <li>IsActive</li>\r\n      </ul>\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All the Mandatory fields must be supplied while adding/updating a staff</li>\r\n        <li>The ProviderIdentifier provided must not be already associated with another Staff</li>\r\n        <li>A Staff must be associated with an Active Company</li>\r\n        <li>\r\n                For Staff Roles,\r\n                <ul><li>Active Since Date must not be future date</li><li>DeActivation Date must not be less that the ActiveSince Date</li></ul></li>\r\n        <li>A person must have at least one role while adding a new person</li>\r\n        <li>A person can be associated with same or different sales roles for offices (one per office) at the same time.</li>\r\n        <li>A person can have one or more than one non-sales roles across offices (or in an office) or at company level at the same time, as long as the role type is not duplicated in an office and is not deactivated.</li>\r\n        <li>Active Staff Roles can be added to only Open/Executed Offices</li>\r\n        <li>For US &amp; Canada Master Franchisors, Owner and Responsible Broker roles cannot be assigned to any staffs as these roles are considered as contractual information</li>\r\n        <li>If there are any producing roles for the Staff, the PrimaryOffice must be the Office in which the staff has a producing role</li>\r\n        <li>If there are no producing roles for the Staff, the PrimaryOffice can be any of the Office in which the staff has any active role</li>\r\n        <li>If a person is associated with an active guest role, no other role can be selected for that person </li>\r\n        <li>A Person can either have �Guest Non-Sales� or �Guest Sales� role, but not both roles at any point in time</li>\r\n        <li>When adding person with a Guest Role, system defaults the de-active date = (current Date) + (X) no of days, based on the configuration for each brand. The de-active date added by the system is not editable or cannot be deleted</li>\r\n        <li>If FamiliarName is not provided for the person, then the value will be set to FirstName by default</li>\r\n        <li>If DisplayName is not provided for the person, then the value will be set to FirstName + LastName + NameSuffix by default</li>\r\n        <li>If StartedInBrand is supplied, the value must not be in future</li>\r\n        <li>If StartedInRealEstateOn is supplied, the value must not be in future</li>\r\n        <li>If DateOfBirth is supplied, the value must not be in future</li>\r\n        <li>If Additional Person Names are supplied, then there must only be one record per language</li>\r\n        <li>There must not be multiple Media Captions with the same language for each media item</li>\r\n        <li>Additional EmailAddresses are allowed only one per email type</li>\r\n        <li>For the same Website type, there must not be multiple web URLs provided with the same content language</li>\r\n        <li>Person Profile must not have multiple records of the same type and language</li>\r\n        <li>The Designations -  \"Fine Homes and Estates Specialist\" (FHE) or \"Commercial Specialist\" (COM) designation or C21 Global Real Estate Network (GREN) will be ignored if provided</li>\r\n        <li>In the list of Designations, the same Designations must not be supplied more than once</li>\r\n        <li>License issuedOn date must not be future date</li>\r\n        <li>License expires On date must not be before issued on date</li>\r\n        <li>In the list of Spoken Languages, the same language must not be supplied more than once</li>\r\n        <li>In the list of Designations, the same Designations must not be supplied more than once</li>\r\n        <li>In the list of Area of Specializations, the same Area of Specialization must not be supplied more than once</li>\r\n        <li>If Staff DeactivationDate is supplied, the value must not be less than staff active since date</li>\r\n        <li>Designations Deactivation date must be less than Active date</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CompanyStaff_Post",
        "requestBody": {
          "description": "This parameter represents the Company Staff details",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/companyStaff/{id}": {
      "put": {
        "tags": [
          "CompanyStaff"
        ],
        "summary": "CompanyStaff_Put",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#UpdCS').toggle();\" />\r\n  <div id=\"UpdCS\" class=\"businessRule\">\r\n    <br />\r\n    <ul>\r\n      <li>This method will be used to update an existing staff by using Staff GUID or ProviderIdentifier</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <b>\r\n        <u>Mandatory Fields:</u>\r\n      </b>\r\n      <ul>\r\n        <li>Parameter - id (CompanyStaff GUID or ProviderIdentifier)</li>\r\n        <li>FirstName</li>\r\n        <li>LastName</li>\r\n        <li>PrimaryEmailAddress</li>\r\n        <li>Company (Company GUID OR ProviderIdentifier (can be provided only by the office provider) OR Company ID)</li>\r\n        <li>PrimaryOffice Office GUID OR ProviderIdentifier (can be provided only by the office provider) OR Company ID &amp; Office ID)</li>\r\n        <li>Roles</li>\r\n        <li>IsActive</li>\r\n      </ul>\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All the Mandatory fields must be supplied while adding/updating a staff</li>\r\n        <li>The parameter - idType is mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id must be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>The Staff GUID or ProviderIdentifier provided must exist in the system</li>\r\n        <li>Deactivated Persons cannot be updated unless the update is to re-activate the person</li>\r\n        <li>The Staff must be associated with an Active Company</li>\r\n        <li>\r\n                For Staff Roles,\r\n                <ul><li>Active Since Date must not be future date</li><li>DeActivation Date must not be less that the ActiveSince Date</li></ul></li>\r\n        <li>A person must have at least one role while adding a new person</li>\r\n        <li>A person can be associated with same or different sales roles for offices (one per office) at the same time.</li>\r\n        <li>A person can have one or more than one non-sales roles across offices (or in an office) or at company level at the same time as long as roles type is not duplicated in an office and is not deactivated.</li>\r\n        <li>Active Staff Roles can be added to only Open/Executed Offices</li>\r\n        <li>For US &amp; Canada Master Franchisors, Owner and Responsible Broker roles cannot be assigned to any staffs as these roles are considered as contractual information</li>\r\n        <li>For US &amp; Canada MasterFranchisors, Contractual information cannot be updated for Owner and Responsible broker. Contractual information includes - Role Title, Active Since Date, Deactivation Date, First Name, Last Name, Display Name, Familiar Name</li>\r\n        <li>If there are any producing roles for the Staff, the PrimaryOffice must be the Office in which the staff has a producing role</li>\r\n        <li>If there are no producing roles for the Staff, the PrimaryOffice can be any of the Office in which the staff has any active role</li>\r\n        <li>If a person is associated with an active guest role, no other role can be selected for that person</li>\r\n        <li>A Person can either have �Guest Non-Sales� or �Guest Sales� role but not both roles at any point in time</li>\r\n        <li>When adding person with a Guest Role, system defaults the de-active date = (current Date) + (X) no of days, based on the configuration for each brand. The de-active date added by the system is not editable or cannot be deleted</li>\r\n        <li>If FamiliarName is not provided for the person, then the value will be set to FirstName by default</li>\r\n        <li>If DisplayName is not provided for the person, then the value will be set to FirstName + LastName + NameSuffix by default</li>\r\n        <li>If StartedInBrand is supplied, the value must not be in future</li>\r\n        <li>If StartedInRealEstateOn is supplied, the value must not be in future</li>\r\n        <li>If DateOfBirth is supplied, the value must not be in future</li>\r\n        <li>If Additional Person Names are supplied, then there must only be one record per language</li>\r\n        <li>There must not be multiple Media Captions with the same language for each media item</li>\r\n        <li>Additional EmailAddresses are allowed only one per email type</li>\r\n        <li>For the same Website type, there must not be multiple web URLs provided with the same content language</li>\r\n        <li>Person Profile must not have multiple records of the same type and language</li>\r\n        <li>The Designations -  \"Fine Homes and Estates Specialist\" (FHE) or \"Commercial Specialist\" (COM) designation or C21 Global Real Estate Network (GREN) will be ignored if provided</li>\r\n        <li>In the list of Designations, the same Designations must not be supplied more than once</li>\r\n        <li>License issuedOn date must not be future date</li>\r\n        <li>License expires On date must not be before issued on date</li>\r\n        <li>In the list of Spoken Languages, the same language must not be supplied more than once</li>\r\n        <li>In the list of Designations, the same Designations must not be supplied more than once</li>\r\n        <li>In the list of Area of Specializations, the same Area of Specialization must not be supplied more than once</li>\r\n        <li>If Staff DeactivationDate is supplied, the value must not be less than staff active since date</li>\r\n        <li>Designations Deactivation date must be less than Active date</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CompanyStaff_Put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the company staff. It can be either Company Staff GUID or Company Staff ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Company Staff GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This parameter represents the Company Staff details",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/companystaff/delta": {
      "get": {
        "tags": [
          "CompanyStaff"
        ],
        "summary": "CompanyStaff_Delta",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#SDELTA').toggle();\" />\r\n  <div id=\"SDELTA\">\r\n    <ul>\r\n      <li>This method will be used to get the list of Company Staff that were updated (created or modified) over the specified period of time (fromDate and toDate).</li>\r\n      <li>The results can be filtered by brand or list of RFG Company IDs</li>\r\n      <li>The DateTime format supported is standard date-time format (yyyy-MM-ddThh:mm:ss[.fffffff]). Example: 2015-02-13T06:40:48.937</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>FromDate is mandatory</li>\r\n        <li>If toDate is not supplied, system will take today's date</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CompanyStaff_Delta",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This parameter represents the Date from which the delta operation needs to be performed. <br />\r\nDataType: DateTime with offset (Standard formats allowed are - yyyy-MM-ddThh:mm:ss[.fffffff] zzz. Any DateTime without offset will be considered as Eastern Time)<br />\r\nExample: 2015-02-13T06:40:48.937-04:00",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This parameter represents the Date to which the delta operation needs to be performed. <br />\r\nDataType: DateTime with offset (Standard formats allowed are - yyyy-MM-ddThh:mm:ss[.fffffff] zzz. Any DateTime without offset will be considered as Eastern Time)<br />\r\nExample: 2015-02-13T06:40:48.937-04:00",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brandCode",
            "in": "query",
            "description": "This parameter represents the Brand Code",
            "schema": {
              "enum": [
                "BHG",
                "C21",
                "CB",
                "CBC",
                "ERA",
                "SIR",
                "ZAP",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyIds",
            "in": "query",
            "description": "This parameter represents the List of RFG Company IDs to be used for filtering the delta search results",
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "isLastUpdatedBy",
            "in": "query",
            "description": "If isLastUpdatedBy is true then CompanyStaff are displayed which are not updated by current user. If isLastUpdatedBy is false then all the CompanyStaff are displayed",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/companystaff/agents": {
      "get": {
        "tags": [
          "CompanyStaff"
        ],
        "summary": "CompanyStaff_SearchAgent",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#SS').toggle();\" />\r\n  <div id=\"SS\">\r\n    <ul>\r\n      <li>This method will be used to search all the company agents</li>\r\n      <li>The search is primarily brand and office GUID based search (with firstName, lastName, location and company GUID as additional filters)</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>The Search will be an agent search and will return only agents</li>\r\n        <li>The Search will be an AND based search</li>\r\n        <li>For Parameters - FirstName and LastName, the method performs a �Starts With� search</li>\r\n        <li>The Office GUID, if provided, must be an Open/Executed Office. Results will not be returned if the Office GUID does not belong to an Open/Executed Office</li>\r\n        <li>The Company GUID, if provided, must be an Active Company. Results will not be returned if the Company GUID is a De-Active Company</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CompanyStaff_SearchAgent",
        "parameters": [
          {
            "name": "brand",
            "in": "query",
            "description": "This parameter represents the Brand Code",
            "required": true,
            "schema": {
              "enum": [
                "BHG",
                "C21",
                "CB",
                "CBC",
                "ERA",
                "SIR",
                "ZAP",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "This parameter represents the First Name of the Company staff",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "This parameter represents the Last Name of the Company staff",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "query",
            "description": "This parameter represents the Country Name/Code of the Company staff's location",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stateProvince",
            "in": "query",
            "description": "This parameter represents the State Province Code/Name of the Company staff's location",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city",
            "in": "query",
            "description": "This parameter represents the City Name of the Company staff's location",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "officeGuid",
            "in": "query",
            "description": "Format - uuid. This parameter represents the Office GUID of the Company staff and Office GUID is mandatory field. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyGuid",
            "in": "query",
            "description": "Format - uuid. This parameter represents the Company GUID of the Company staff. This will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/companystaff/{companyStaffGuid}/designation": {
      "patch": {
        "tags": [
          "CompanyStaff"
        ],
        "summary": "CompanyStaff_PatchDesignation",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#SPUTD').toggle();\" />\r\n  <div id=\"SPUTD\">\r\n    <ul>\r\n      <li>This method adds/updates designation or qualification of an agent</li>\r\n      <li>An agent can be awarded with 'Fine Homes and Estates Specialist' (FHE) or 'Commercial Specialist' (COM) or 'C21 Global Real Estate Network' (GREN) or 'Property Specialist' designations</li>\r\n      <li>The ActiveSince Date and the Deactivation Date provided will overwrite the existing data (if present)</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Mandatory Fields:</u>\r\n      </b>\r\n      <ul>\r\n        <li>companyStaffGuid</li>\r\n        <li>designation</li>\r\n      </ul>\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All Mandatory Fields must be supplied</li>\r\n        <li>The CompanyStaffGUID supplied must exist in the system</li>\r\n        <li>The ActiveSince Date for the designation must not be in the future</li>\r\n        <li>The DeactivatedOn Date for the designation must not be before the ActiveSince date</li>\r\n        <li>The only accepted designations are: 'Fine Homes and Estates Specialist' ('39'), 'Commercial Specialist' ('33'), 'C21 Global Real Estate Network' ('115') and 'Property Specialist' ('988'). Any other designations will be rejected</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CompanyStaff_PatchDesignation",
        "parameters": [
          {
            "name": "companyStaffGuid",
            "in": "path",
            "description": "Format - uuid. This parameter represents the Company Staff GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This parameter represents the Designation of the person",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/companystaff/{id}/profiles": {
      "patch": {
        "tags": [
          "CompanyStaff"
        ],
        "summary": "CompanyStaff_PatchProfiles",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#SPUTP').toggle();\" />\r\n  <div id=\"SPUTP\">\r\n    <ul>\r\n      <li>This method adds/updates profile information for a staff by providing the CompanyStaff GUID or ProviderIdentifier</li>\r\n      <li>This method will add/update (overwrite if the profile already exists) profile information for a staff based on ProfileCategory and Language provided in the request</li>\r\n      <li>This method will update profile only if the profile was supplied by the provider. Otherwise it will be added as a new profile</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>The parameter - idType is mandatory</li>\r\n        <li>The parameter - profiles is mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id should be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>All Mandatory Fields must be supplied</li>\r\n        <li>The CompanyStaffGUID (if idType is 'id') or the Company Staff ProviderIdentifier (if idType is \"providerid\") supplied must exist in the system and should be the guid corresponding to an active Staff</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CompanyStaff_PatchProfiles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the company staff. It can be either Company Staff GUID or Company Staff ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Company Staff GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This parameter represents the Collection of Profiles",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/companystaff/byoffice": {
      "get": {
        "tags": [
          "CompanyStaff"
        ],
        "summary": "CompanyStaff_SearchByOffice",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#SBO').toggle();\" />\r\n  <div id=\"SBO\">\r\n    <ul>\r\n      <li>This method will be used to get the summary of all active Staff for the specified Office GUID</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>Only Open or Executed Office�s active staff will be returned</li>\r\n        <li>If office GUID does not exists in our system, API will return �HTTP 404 - Not Found� status code.</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CompanyStaff_SearchByOffice",
        "parameters": [
          {
            "name": "officeGuid",
            "in": "query",
            "description": "Format - uuid. This parameter represents the Office GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/companystaff/bycompany": {
      "get": {
        "tags": [
          "CompanyStaff"
        ],
        "summary": "CompanyStaff_SearchByCompany",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#SBC').toggle();\" />\r\n  <div id=\"SBC\">\r\n    <ul>\r\n      <li>This method will be used to get the summary of all active Staff for the specified Company GUID</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>Only active company�s active staff will be returned</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CompanyStaff_SearchByCompany",
        "parameters": [
          {
            "name": "companyGuid",
            "in": "query",
            "description": "Format - uuid. This parameter represents the Company GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/listings/bycompany": {
      "get": {
        "tags": [
          "Listings"
        ],
        "summary": "Listings_SearchByCompany",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#GLBC').toggle();\" />\r\n  <div id=\"GLBC\">\r\n    <ul>\r\n      <li>This method will be used to get the summary of all Active/Pending listings for CommercialSale &amp; ResidentialSale and Available listings for Commercial Lease &amp; Residential Rental for the specified Company GUID</li>\r\n      <li>This method will be primarily used to sync all the listings for a company</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>Only Active company�s listings will be returned</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Listings_SearchByCompany",
        "parameters": [
          {
            "name": "companyGuid",
            "in": "query",
            "description": "Format - uuid. This parameter represents the Company GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/listings/byoffice": {
      "get": {
        "tags": [
          "Listings"
        ],
        "summary": "Listings_SearchByOffice",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#GLBO').toggle();\" />\r\n  <div id=\"GLBO\">\r\n    <ul>\r\n      <li>This method will be used to get the summary of all Active/Pending listings for CommercialSale &amp; ResidentialSale and Available listings for Commercial Lease &amp; Residential Rental for the specified Office GUID</li>\r\n      <li>This method will be primarily used to sync all the listings for an office</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>Only Open or Executed Office�s listings will be returned</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Listings_SearchByOffice",
        "parameters": [
          {
            "name": "officeGuid",
            "in": "query",
            "description": "Format - uuid. This parameter represents the Office GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/listings/byteam": {
      "get": {
        "tags": [
          "Listings"
        ],
        "summary": "Listings_SearchByTeam",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#GLBT').toggle();\" />\r\n  <div id=\"GLBT\">\r\n    <ul>\r\n      <li>This method will be used to get the summary of on-marketed listings for CommercialSale, ResidentialSale, Commercial Lease &amp; Residential Rental for the specified Team GUID</li>\r\n      <li>This method will be primarily used to sync all the listings for team</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>Active team and team members listings will be returned</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Listings_SearchByTeam",
        "parameters": [
          {
            "name": "teamGuid",
            "in": "query",
            "description": "Format - uuid. This parameter represents the Team GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/listings/byagent": {
      "get": {
        "tags": [
          "Listings"
        ],
        "summary": "Listings_SearchByAgent",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#GLBA').toggle();\" />\r\n  <div id=\"GLBA\">\r\n    <ul>\r\n      <li>This method will be used to get the summary of Active/Pending listings for CommercialSale &amp; ResidentialSale and Available listings for Commercial Lease &amp; Residential Rental for the specified Agent GUID or ProviderIdentifier</li>\r\n      <li>This will be primarily used to sync all the listings for an Agent</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>The parameter - idType is mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id should be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>Only Active Company Staff GUID or ProviderIdentifier�s listings will be returned of active Agents</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Listings_SearchByAgent",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "This parameter represents the identifier of the Agent. It can be either Agent GUID or Agent ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Agent GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/listings/delta": {
      "get": {
        "tags": [
          "Listings"
        ],
        "summary": "Listings_Delta",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#RSDELTA').toggle();\" />\r\n  <div id=\"RSDELTA\">\r\n    <ul>\r\n      <li>This method will return list of listing GUIDs (if available) that are created or modified between specified fromDate and toDate.</li>\r\n      <li>The results can be filtered by brand or list of RFG Company IDs or Listing Type Code (The list of available codes can be obtained by calling method - CodeValuesGet (/codevalues), passing categoryName as ListingType)</li>\r\n      <li>The Date-Time format supported is standard date-time format (yyyy-MM-ddThh:mm:ss[.fffffff]). Example: 2015-02-13T06:40:48.937</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>FromDate is mandatory</li>\r\n        <li>If toDate is not supplied, system will take today's date</li>\r\n        <li>The fromDate must not be in Future</li>\r\n        <li>The toDate must not be before fromDate</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Listings_Delta",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This parameter represents the Date from which the delta operation needs to be performed. <br />\r\nDataType: DateTime with offset (Standard formats allowed are - yyyy-MM-ddThh:mm:ss[.fffffff] zzz. Any DateTime without offset will be considered as Eastern Time)<br />\r\nExample: 2015-02-13T06:40:48.937-04:00",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This parameter represents the Date to which the delta operation needs to be performed. <br />\r\nDataType: DateTime with offset (Standard formats allowed are - yyyy-MM-ddThh:mm:ss[.fffffff] zzz. Any DateTime without offset will be considered as Eastern Time)<br />\r\nExample: 2015-02-13T06:40:48.937-04:00",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brandCode",
            "in": "query",
            "description": "This parameter represents the Brand Code",
            "schema": {
              "enum": [
                "BHG",
                "C21",
                "CB",
                "CBC",
                "ERA",
                "SIR",
                "ZAP",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyIds",
            "in": "query",
            "description": "This parameter represents the List of RFG Company IDs to be used for filtering the delta search results",
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "listingType",
            "in": "query",
            "description": "This parameter represents the Listing Type code that should be used for filtering the delta search results (eg: Residential Sale, Commercial Sale, Residential Rental, Commercial Lease)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isLastUpdatedBy",
            "in": "query",
            "description": "If isLastUpdatedBy is true then Listings are displayed which are not updated by current user. If isLastUpdatedBy is false then all the listings are displayed",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/listings/{id}/media": {
      "patch": {
        "tags": [
          "Listings"
        ],
        "summary": "Listings_PatchMedia",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#ALM').toggle();\" />\r\n  <div id=\"ALM\">\r\n    <ul>\r\n      <li>This method will be used to append a media item or a collection of media items to a listing using the Listing GUID or ProviderIdentifier</li>\r\n      <li>If isReplace flag is set to false,</li>\r\n      <ul>\r\n        <li>A new media will be added to the listing if the provided media identifier does not exist</li>\r\n        <li>If the media already exists, the metadata information (like Caption, Description etc.) will be updated and the actual URL or the resized URLs will not be updated</li>\r\n      </ul>\r\n      <li>If isReplace flag is set to true,</li>\r\n      <ul>\r\n        <li>All media items for the listing will be replaced with the supplied media items</li>\r\n        <li>This method will replace only those media items which were supplied by the provider</li>\r\n      </ul>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All the Mandatory fields must be provided</li>\r\n        <li>The parameters - idType, media and isReplace are mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id should be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>There should not be multiple Media Captions with the same language for each media item</li>\r\n        <li>If a Listing does not exists in our system for the Listing GUID provided, the method will return �HTTP 404 - Not Found� error</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Listings_PatchMedia",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the Listing. It can be either Listing GUID or Listing ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Listing GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isReplace",
            "in": "query",
            "description": "This parameter represents whether the media provided needs to replace all the existing media or not",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "This parameter represents the Collection of Media",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/listings/{id}/media/{mediaProviderIdentifier}": {
      "delete": {
        "tags": [
          "Listings"
        ],
        "summary": "Listings_DeleteMedia",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#DM').toggle();\" />\r\n  <div id=\"DM\">\r\n    <ul>\r\n      <li>This method will be used to delete an existing media for a listing by providing the Listing GUID/ProviderIdentifier and Media ProviderIdentifier</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>The parameter - idType and mediaProviderIdentifier is mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id should be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>If Listing does not exists in our system for the Listing GUID/ProviderIdentifier supplied, the method will return �HTTP 404 - Not Found� error</li>\r\n        <li>If Media does not exists in our system for the supplied Media ProviderIdentifier, API will return �HTTP 404 - Not Found� status code.</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Listings_DeleteMedia",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the Listing. It can be either Listing GUID or Listing ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mediaProviderIdentifier",
            "in": "path",
            "description": "This parameter represents the ProviderIdentifier for the media to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Listing GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "204": {
            "description": "NoContent",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/listings/{id}/listingisoffmarket": {
      "patch": {
        "tags": [
          "Listings"
        ],
        "summary": "Listings_PatchListingIsOffMarket",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#PLI').toggle();\" />\r\n  <div id=\"ALM\">\r\n    <ul>\r\n      <li>This method will be used to make IsOffTheMarket flag set to 1 for a Listing by using the Listing GUID or ListingID or ProviderIdentifier</li>\r\n      <li>If the Listing status is \"AC/AV\" then Listing/Transaction status will be set to \"UN\"</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All the Mandatory fields must be provided</li>\r\n        <li>The parameters - idType is mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id should be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>If Listing does not exists in our system for the Listing GUID/ListingID/ProviderIdentifier supplied, the method will return �HTTP 404 - Not Found� error</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Listings_PatchListingIsOffMarket",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the Listing. It can be either Listing GUID or ListingID or Listing ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Listing GUID is provided as the identifier.\r\nIf the identifier provided is ListingID, the idType should be \"listingid\"\r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "204": {
            "description": "NoContent",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/listings/{id}/listinglandingpageurl": {
      "patch": {
        "tags": [
          "Listings"
        ],
        "summary": "Listings_PatchListingLandingPageURL",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#PLL').toggle();\" />\r\n  <div id=\"ALM\">\r\n    <ul>\r\n      <li>This method will be used to update LandingPageURL for a Listing and ListingWebsites by using the Listing GUID or ListingID or ProviderIdentifier</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All the Mandatory fields must be provided</li>\r\n        <li>The parameters - idType and landingPageUrl are mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id should be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>If Listing does not exists in our system for the Listing GUID/ListingID/ProviderIdentifier supplied, the method will return �HTTP 404 - Not Found� error</li>\r\n        <li>If the provided LandingPageURL in not valid, the method will return \"Invalid URI: The format of the URI could not be determined\" error</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Listings_PatchListingLandingPageURL",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the Listing. It can be either Listing GUID or ListingID or Listing ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Listing GUID is provided as the identifier.\r\nIf the identifier provided is ListingID, the idType should be \"listingid\"\r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "landingPageUrl",
            "in": "query",
            "description": "This parameter is used to update LandingPageURL for Listing and ListingWebsites",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "204": {
            "description": "NoContent",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/offices/{officeGuid}": {
      "get": {
        "tags": [
          "Offices"
        ],
        "summary": "Offices_Get",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#OGET').toggle();\" />\r\n  <div id=\"OGET\">\r\n    <ul>\r\n      <li>This method will provide all the Office details for the specified Office GUID.</li>\r\n      <li>This method will be used as a result of an office delta call.</li>\r\n      <li>Open or Executed Office information will be returned</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>If Office GUID does not exist in our system, API will return �HTTP 404 - Not Found� status code.</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Offices_Get",
        "parameters": [
          {
            "name": "officeGuid",
            "in": "path",
            "description": "Format - uuid. This parameter represents the Office GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/offices/delta": {
      "get": {
        "tags": [
          "Offices"
        ],
        "summary": "Offices_Delta",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#ODELTA').toggle();\" />\r\n  <div id=\"ODELTA\">\r\n    <ul>\r\n      <li>This method will be used to get the list of Offices which got updated over the specified period of time. </li>\r\n      <li>The results can be filtered by brand or list of RFG Company IDs</li>\r\n      <li>The Date-Time format supported is standard date-time format (yyyy-MM-ddThh:mm:ss[.fffffff]). Example: 2015-02-13T06:40:48.937</li>\r\n      <li>This Method will return list of Office GUIDs (if available) that are created or modified between fromDate and toDate</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>FromDate is mandatory</li>\r\n        <li>If toDate is not supplied, system will take today's date</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Offices_Delta",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This parameter represents the Date from which the delta operation needs to be performed. <br />\r\nDataType: DateTime with offset (Standard formats allowed are - yyyy-MM-ddThh:mm:ss[.fffffff] zzz. Any DateTime without offset will be considered as Eastern Time)<br />\r\nExample: 2015-02-13T06:40:48.937-04:00",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This parameter represents the Date to which the delta operation needs to be performed. <br />\r\nDataType: DateTime with offset (Standard formats allowed are - yyyy-MM-ddThh:mm:ss[.fffffff] zzz. Any DateTime without offset will be considered as Eastern Time)<br />\r\nExample: 2015-02-13T06:40:48.937-04:00",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brandCode",
            "in": "query",
            "description": "This parameter represents the Brand Code",
            "schema": {
              "enum": [
                "BHG",
                "C21",
                "CB",
                "CBC",
                "ERA",
                "SIR",
                "ZAP",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyIds",
            "in": "query",
            "description": "This parameter represents the List of RFG Company IDs to be used for filtering the delta search results",
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "isLastUpdatedBy",
            "in": "query",
            "description": "If isLastUpdatedBy is true then Offices are displayed which are not updated by current user. If isLastUpdatedBy is false then all the Offices are displayed",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/offices/{officeGuid}/designation": {
      "patch": {
        "tags": [
          "Offices"
        ],
        "summary": "Offices_PatchDesignation",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#OPUTD').toggle();\" />\r\n  <div id=\"OPUTD\">\r\n    <ul>\r\n      <li>This method adds/updates designation or qualification of an office</li>\r\n      <li>An office can be awarded with 'Fine Homes &amp; Estates' ('13') or 'Commercial Investment Network' ('8') or C21 Global Real Estate Network ('71') designations</li>\r\n      <li>If an office has CIN or FHE or GREN designation and the designation status is 'Active' a charge will be generated for the processing office and the charge information will be sent to Oracle</li>\r\n      <li>The ActiveSince Date and the Deactivation Date provided will overwrite the existing data (if present)</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Mandatory Fields:</u>\r\n      </b>\r\n      <ol>\r\n        <li>DesignationCode OR DesignationDescription</li>\r\n        <li>ActiveSince</li>\r\n      </ol>\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All Mandatory Fields must be supplied</li>\r\n        <li>The OfficeGUID supplied must exist in the system</li>\r\n        <li>The ActiveSince Date for the designation must not be in the future</li>\r\n        <li>The DeactivatedOn Date for the designation must not be before the ActiveSince date</li>\r\n        <li>The only accepted designations are: 'Fine Homes &amp; Estates' ('13'), 'Commercial Investment Network' ('8') and C21 Global Real Estate Network ('71'). Any other designations will be rejected</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Offices_PatchDesignation",
        "parameters": [
          {
            "name": "officeGuid",
            "in": "path",
            "description": "Format - uuid. This parameter represents the Office GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This parameter represents the Designation of the office",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/offices/{officeGuid}/profiles": {
      "patch": {
        "tags": [
          "Offices"
        ],
        "summary": "Offices_PatchProfiles",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#OPUTP').toggle();\" />\r\n  <div id=\"OPUTP\">\r\n    <ul>\r\n      <li>This method adds/updates profile information for an office by providing the Office GUID</li>\r\n      <li>This method will add/update (overwrite if the profile already exists) profile information for an office based on ProfileCategory and Language provided in the request</li>\r\n      <li>This method will update profile only if the profile was originally supplied by the provider. Otherwise it will be added as a new profile</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Mandatory Fields:</u>\r\n      </b>\r\n      <ol>\r\n        <li>ProfileCategoryCode OR ProfileCategoryDescription</li>\r\n        <li>LanguageCode OR LanguageName</li>\r\n        <li>ProfileText OR HtmlProfileText</li>\r\n      </ol>\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All Mandatory Fields must be supplied</li>\r\n        <li>The Office GUID supplied must exist in the system belonging to an Open/Executed Office</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Offices_PatchProfiles",
        "parameters": [
          {
            "name": "officeGuid",
            "in": "path",
            "description": "Format - uuid. This parameter represents the Office GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This parameter represents the Collection of Office Profiles",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/offices": {
      "get": {
        "tags": [
          "Offices"
        ],
        "summary": "Offices_Search",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#GTBC').toggle();\" />\r\n  <div id=\"GTBC\">\r\n    <ul>\r\n      <li>This method will be used to search all the offices by specifying one or more search criteria.</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Mandatory Fields:</u>\r\n      </b>\r\n      <ol>\r\n        <li>Brand</li>\r\n        <li>Country</li>\r\n        <li>StateProvince or City</li>\r\n      </ol>\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All the Mandatory fields must be supplied</li>\r\n        <li>Only Offices that are in open or executed status and belonging to active companies will be returned</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Offices_Search",
        "parameters": [
          {
            "name": "brand",
            "in": "query",
            "description": "This parameter represents the brand.",
            "required": true,
            "schema": {
              "enum": [
                "BHG",
                "C21",
                "CB",
                "CBC",
                "ERA",
                "SIR",
                "ZAP",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "query",
            "description": "This parameter represents the Country Name/Code of the office's location",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stateProvince",
            "in": "query",
            "description": "This parameter represents the State province code/name of the office's location",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city",
            "in": "query",
            "description": "This parameter represents the city name of the office's location",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/transactions/otherincomes/{id}": {
      "get": {
        "tags": [
          "OtherIncomeTransactions"
        ],
        "summary": "OtherIncomeTransactions_Get",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#OIGET').toggle();\" />\r\n  <div id=\"OIGET\">\r\n    <ul>\r\n      <li>This method is to get Commercial/Residential Other Income Transaction details by passing TransactionGUID or ProviderIdentifier</li>\r\n      <li>This will be primarily called as a result of a delta call or after adding a new Transaction</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>If an Other Income Transaction does not exists in our system for the Transaction GUID/ProviderIdentifier supplied, the method will return �HTTP 404 - Not Found� error</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "OtherIncomeTransactions_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the Transaction. It can be either Transaction GUID or Transaction ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Transaction GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      },
      "put": {
        "tags": [
          "OtherIncomeTransactions"
        ],
        "summary": "OtherIncomeTransactions_Put",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#OIPUT').toggle();\" />\r\n  <div id=\"OIPUT\">\r\n    <ul>\r\n      <li>This method will be used to update an existing Other Income Transaction by using TransactionGUID or ProviderIdentifier</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Mandatory Fields:</u>\r\n      </b>\r\n      <ul>\r\n        <li>Parameter - id (TransactionGUID/ProviderIdentifier)</li>\r\n        <li>Office (Office GUID OR ProviderIdentifier (can be provided only by the office provider) OR Company ID &amp; Office ID)</li>\r\n        <li>IsCommercial</li>\r\n        <li>IncomeReceived</li>\r\n        <li>Currency (Code or Name)</li>\r\n        <li>PropertyType (Code or Description)</li>\r\n        <li>IncomeType (Code or Description)</li>\r\n        <li>IncomeReceivedOn</li>\r\n        <li>Client</li>\r\n      </ul>\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All Mandatory fields must be supplied while adding/updating a Transaction</li>\r\n        <li>If an Other Income Transaction does not exists in our system for the Transaction GUID supplied, the method will return �HTTP 404 - Not Found� error</li>\r\n        <li>The Reporting Office must be an Open/Terminated Office</li>\r\n        <li>The Agent supplied must be present in the system</li>\r\n        <li>Total Participation percentage for all agents must be 100</li>\r\n        <li>There must be one and only one primary agent</li>\r\n        <li>The transaction can be updated only within 90 days from the Closing Reported Date</li>\r\n        <li>IncomeReceivedOn date cannot be updated</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "OtherIncomeTransactions_Put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the Transaction. It can be either Transaction GUID or Transaction ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Transaction GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This parameter represents the Other Income Transaction details",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/transactions/otherincomes": {
      "post": {
        "tags": [
          "OtherIncomeTransactions"
        ],
        "summary": "OtherIncomeTransactions_Post",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#OIPOST').toggle();\" />\r\n  <div id=\"OIPOST\">\r\n    <ul>\r\n      <li>This method will be used to add a new Other Income Transaction</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Mandatory Fields:</u>\r\n      </b>\r\n      <ul>\r\n        <li>Office (Office GUID OR ProviderIdentifier (can be provided only by the office provider) OR Company ID &amp; Office ID)</li>\r\n        <li>IsCommercial</li>\r\n        <li>IncomeReceived</li>\r\n        <li>Currency (Code or Name)</li>\r\n        <li>PropertyType (Code or Description)</li>\r\n        <li>IncomeType (Code or Description)</li>\r\n        <li>IncomeReceivedOn</li>\r\n        <li>Client</li>\r\n        <li>ProviderIdentifier</li>\r\n      </ul>\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All Mandatory fields must be supplied while adding/updating a Transaction</li>\r\n        <li>The Reporting Office must  be an Open Office</li>\r\n        <li>The Agent supplied must exist in the system</li>\r\n        <li>Total Participation percentage for all agents must equal to 100%</li>\r\n        <li>There must  be at least one primary agent</li>\r\n        <li>IncomeReceivedOn date cannot be in the future</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "OtherIncomeTransactions_Post",
        "requestBody": {
          "description": "This parameter represents the Other Income Transaction details",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/consumer/listings/residentialrentals/{listingGuid}": {
      "get": {
        "tags": [
          "ResidentialRentalListings"
        ],
        "summary": "ResidentialRentalListings_GetConsumer",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#RRLGETC').toggle();\" />\r\n  <div id=\"RRLGETC\">\r\n    <ul>\r\n      <li>This method is to get the Residential Rental Listing details by passing ListingGUID</li>\r\n      <li>This will be primarily called as a result of a delta call or after adding a new Listing</li>\r\n      <li>This action will return only Available listings</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>If a Residential Rental Listing does not exists in our system for the Listing GUID provided, the method will return �HTTP 404 - Not Found� error</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "ResidentialRentalListings_GetConsumer",
        "parameters": [
          {
            "name": "listingGuid",
            "in": "path",
            "description": "Format - uuid. This parameter represents the Listing GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/consumer/listings/residentialsales/{listingGuid}": {
      "get": {
        "tags": [
          "ResidentialSaleListings"
        ],
        "summary": "ResidentialSaleListings_GetConsumer",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#RSLGETC').toggle();\" />\r\n  <div id=\"RSLGETC\">\r\n    <ul>\r\n      <li>This method is to get the Residential Sale Listing details by passing ListingGUID</li>\r\n      <li>This will be primarily called as a result of a delta call or after adding a new Listing</li>\r\n      <li>This action will return only active/pending listings</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>If a Residential Sale Listing does not exists in our system for the Listing GUID provided, the method will return �HTTP 404 - Not Found� error</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "ResidentialSaleListings_GetConsumer",
        "parameters": [
          {
            "name": "listingGuid",
            "in": "path",
            "description": "Format - uuid. This parameter represents the Listing GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/listings/residentialsales/{id}": {
      "get": {
        "tags": [
          "ResidentialSaleListings"
        ],
        "summary": "ResidentialSaleListings_Get",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#RSLGET').toggle();\" />\r\n  <div id=\"RSLGET\">\r\n    <ul>\r\n      <li>This method is to get the Listing details by passing ListingGUID or ProviderIdentifier</li>\r\n      <li>This will be primarily called as a result of a delta call or after adding a new Listing</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>The parameter - idType is mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id should be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>If a Residential Sale Listing does not exists in our system for the Listing GUID provided, the method will return �HTTP 404 - Not Found� error</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "ResidentialSaleListings_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the Listing. It can be either Listing GUID or Listing ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Listing GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ResidentialSaleListings"
        ],
        "summary": "ResidentialSaleListings_Put",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#RSLPUT').toggle();\" />\r\n  <div id=\"RSLPUT\">\r\n    <ul>\r\n      <li>This method will be used to update an existing Residential Sale listing by using Listing GUID or ProviderIdentifier</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Mandatory Fields:</u>\r\n      </b>\r\n      <ul>\r\n        <li>Parameter - id (Listing GUID or ProviderIdentifier)</li>\r\n        <li>Property</li>\r\n        <ul>\r\n          <li>Location (Address of the property)</li>\r\n          <li>TypeCode or TypeDescription (type of the property)</li>\r\n          <li>PropertyName(only if brand is SIR)</li>\r\n        </ul>\r\n        <li>Listing</li>\r\n        <ul>\r\n          <li>Office (Office GUID OR ProviderIdentifier (can be provided only by the office provider) OR Company ID &amp; Office ID)</li>\r\n          <li>PrimaryMLS(only for domestic master franchises)</li>\r\n          <li>PrimaryAgent or Team</li>\r\n        </ul>\r\n        <li>ListPrice</li>\r\n        <li>Currency (Code or Name)</li>\r\n      </ul>\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All Mandatory fields must be supplied while adding/updating a Listing</li>\r\n        <li>The parameter - idType is mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id must be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>If a Residential Sale Listing does not exists in our system for the Listing GUID provided, the method will return �HTTP 404 - Not Found� error</li>\r\n        <li>If YearRenovated is supplied, it must not be in the future and must not be before YearBuilt</li>\r\n        <li>Listing Office supplied must exist with an open/executed status</li>\r\n        <li>Agent supplied for the listing must exist</li>\r\n        <li>Team supplied for the listing must exist</li>\r\n        <li>Listing Remarks must only be with 1 Language/Remark Type combination </li>\r\n        <li>OpenHouse StartOn Date/Time must not be after the EndOn Date/Time</li>\r\n        <li>OpenHouse StartOn Date/Time and EndOn Date/Time is mandatory</li>\r\n        <li>OpenHouse Remarks must not have multiple records for the same language</li>\r\n        <li>Listing website(URL) cannot be duplicated for the same language and type</li>\r\n        <li>There must not be multiple Media Captions with the same language for each media item</li>\r\n        <li>Property type should not be Commercial</li>\r\n        <li>If ExpiresOn date is supplied then it should be greater than ListedDate</li>\r\n        <li>If ClosedOn date is supplied then it should be greater than ListedDate and must not be in the future</li>\r\n        <li>ContractOn should be greater than ListedDate</li>\r\n        <li>Listing features must not have multiple records with same feature</li>\r\n        <li>LastSoldOn must not be in the future</li>\r\n        <li>Listing once closed cannot be revoked</li>\r\n        <li>ListPriceInUSD is a read-only field and is always auto-calculated based on ListPrice</li>\r\n        <li>The valid Listing Statuses that can be supplied are:</li>\r\n        <ul>\r\n          <li>Pre-Listing</li>\r\n          <li>Active</li>\r\n          <li>Expired</li>\r\n          <li>Withdrawn</li>\r\n          <li>Pending (only for Transaction NOT Enabled offices)</li>\r\n          <li>Closed (only for Transaction NOT Enabled offices)</li>\r\n        </ul>\r\n        <li>\r\n                While adding a listing, either the Status or equivalent dates or combination of Status and Dates can be supplied. <br />\r\n                If only Status is supplied, the dates will be defaulted/protected (if exists in our system). Dates defaulted (defaulted to current date) for each status is:\r\n                <ul><li>Pre-Listing</li><ul><li>ListedDated</li></ul><li>Active</li><ul><li>ListedDate</li></ul><li>Expired</li><ul><li>ListedDate</li><li>ExpiresOn</li></ul><li>Withdrawn</li><ul><li>ListedDate</li><li>WithdrawnOn</li></ul><li>Pending</li><ul><li>ListedDate</li><li>ContractOn</li><li>EstimatedClosedOn (will be current date + 90 days)</li></ul><li>Closed</li><ul><li>ListedDate</li><li>ContractOn</li><li>EstimatedClosedOn (will be current date + 90 days)</li><li>ClosedDate</li></ul></ul></li>\r\n        <li>If only dates are supplied, then the status will be derived based on the dates.</li>\r\n        <ul>\r\n          <li>ListedDate</li>\r\n          <ul>\r\n            <li>Active (If listed date is in the past)</li>\r\n            <li>Pre-Listing (If listed date is in the future)</li>\r\n          </ul>\r\n          <li>ExpiresOn (along with ListedDate)</li>\r\n          <ul>\r\n            <li>Active (If ExpiresOn is in the future)</li>\r\n            <li>Expired (If ExpiresOn is in the past)</li>\r\n          </ul>\r\n          <li>WithdrawnOn (along with ListedDate)</li>\r\n          <ul>\r\n            <li>Withdrawn</li>\r\n          </ul>\r\n          <li>ContractOn (along with ListedDate)</li>\r\n          <ul>\r\n            <li>Pending</li>\r\n          </ul>\r\n          <li>ClosedOn (along with ListedDate, ContractOn)</li>\r\n          <ul>\r\n            <li>Closed</li>\r\n          </ul>\r\n        </ul>\r\n        <li>If both status and dates are supplied, then the status and dates will be validated as below.</li>\r\n        <ul>\r\n          <li>Pre-Listing - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in future)</li>\r\n          </ul>\r\n          <li>Active - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in Past)</li>\r\n          </ul>\r\n          <li>Expired - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in Past)</li>\r\n            <li>ExpiresOn (in Past)</li>\r\n          </ul>\r\n          <li>Withdrawn - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in Past)</li>\r\n            <li>WithdrawnOn (in Past)</li>\r\n          </ul>\r\n          <li>Pending - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in Past)</li>\r\n            <li>ContractOn</li>\r\n          </ul>\r\n          <li>Closed - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in Past)</li>\r\n            <li>ContractOn</li>\r\n            <li>ClosedDate</li>\r\n          </ul>\r\n        </ul>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "ResidentialSaleListings_Put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the Listing. It can be either Listing GUID or Listing ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Listing GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This parameter represents the Residential Sale Listing Details",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/listings/residentialsales": {
      "post": {
        "tags": [
          "ResidentialSaleListings"
        ],
        "summary": "ResidentialSaleListings_Post",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#RSLPOST').toggle();\" />\r\n  <div id=\"RSLPOST\">\r\n    <ul>\r\n      <li>This method will be used to add a new Residential Sale listing to the system.</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Mandatory Fields:</u>\r\n      </b>\r\n      <ul>\r\n        <li>Property</li>\r\n        <ul>\r\n          <li>Location (Address of the property)</li>\r\n          <li>TypeCode or TypeDescription (type of the property)</li>\r\n          <li>PropertyName(only if brand is SIR)</li>\r\n        </ul>\r\n        <li>Listing</li>\r\n        <ul>\r\n          <li>Office (Office GUID OR ProviderIdentifier (can be provided only by the office provider) OR Company ID &amp; Office ID)</li>\r\n          <li>ProviderIdentifier</li>\r\n          <li>PrimaryMLS(only for domestic master franchises)</li>\r\n          <li>PrimaryAgent or Team</li>\r\n        </ul>\r\n        <li>ListPrice</li>\r\n        <li>Currency (Code or Name)</li>\r\n      </ul>\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All the Mandatory fields must be supplied while adding/updating a Listing</li>\r\n        <li>If YearRenovated is supplied, it must not be in the future and must not be before YearBuilt</li>\r\n        <li>Listing Office supplied must exist with an open/executed status</li>\r\n        <li>Agent supplied for the listing must exist</li>\r\n        <li>Team supplied for the listing must exist</li>\r\n        <li>Listing Remarks must only be with 1 Language/Remark Type combination </li>\r\n        <li>OpenHouse StartOn Date/Time must not be after the EndOn Date/Time</li>\r\n        <li>OpenHouse StartOn Date/Time and EndOn Date/Time is mandatory</li>\r\n        <li>OpenHouse Remarks must not have multiple records for the same language</li>\r\n        <li>Listing website(URL) cannot be duplicated for the same language and type</li>\r\n        <li>There must not be multiple Media Captions with the same language for each media item</li>\r\n        <li>Property type should not be Commercial</li>\r\n        <li>If ExpiresOn date is supplied then it should be greater than ListedDate</li>\r\n        <li>If ClosedOn date is supplied then it should be greater than ListedDate and must not be in the future</li>\r\n        <li>ContractOn should be greater than ListedDate</li>\r\n        <li>Listing features must not have multiple records with same feature</li>\r\n        <li>LastSoldOn must not be in the future</li>\r\n        <li>ListPriceInUSD is a read-only field and is always auto-calculated based on ListPrice</li>\r\n        <li>The valid Listing Statuses that can be supplied are:</li>\r\n        <ul>\r\n          <li>Pre-Listing</li>\r\n          <li>Active</li>\r\n          <li>Pending (only for Transaction NOT Enabled offices)</li>\r\n          <li>Closed (only for Transaction NOT Enabled offices)</li>\r\n        </ul>\r\n        <li>\r\n                While adding a listing, either the Status or equivalent dates or combination of Status and Dates can be supplied. <br />\r\n                If only Status is supplied, the dates will be defaulted. Dates defaulted (defaulted to current date) for each status is:\r\n                <ul><li>Pre-Listing</li><ul><li>ListedDate (will be current date + (X) days)</li></ul><li>Active</li><ul><li>ListedDate</li></ul><li>Pending</li><ul><li>ListedDate</li><li>ContractOn</li><li>EstimatedClosedOn (will be current date + 90 days)</li></ul><li>Closed</li><ul><li>ListedDate</li><li>ContractOn</li><li>EstimatedClosedOn (will be current date + 90 days)</li><li>ClosedDate</li></ul></ul></li>\r\n        <li>If only dates are supplied, then the status will be derived based on the dates.</li>\r\n        <ul>\r\n          <li>ListedDate</li>\r\n          <ul>\r\n            <li>Active (If listed date is in the past)</li>\r\n            <li>Pre-Listing (If listed date is in the future)</li>\r\n          </ul>\r\n          <li>ExpiresOn (along with ListedDate)</li>\r\n          <ul>\r\n            <li>Active (If ExpiresOn is in the future)</li>\r\n            <li>Expired (If ExpiresOn is in the past)</li>\r\n          </ul>\r\n          <li>ContractOn (along with ListedDate)</li>\r\n          <ul>\r\n            <li>Pending</li>\r\n          </ul>\r\n          <li>ClosedOn (along with ListedDate, ContractOn)</li>\r\n          <ul>\r\n            <li>Closed</li>\r\n          </ul>\r\n        </ul>\r\n        <li>If both status and dates are supplied, then the status and dates will be validated as below.</li>\r\n        <ul>\r\n          <li>Pre-Listing - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in future)</li>\r\n          </ul>\r\n          <li>Active - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in Past)</li>\r\n          </ul>\r\n          <li>Pending - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in Past)</li>\r\n            <li>ContractOn</li>\r\n          </ul>\r\n          <li>Closed - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ListedDate (in Past)</li>\r\n            <li>ContractOn</li>\r\n            <li>ClosedDate</li>\r\n          </ul>\r\n        </ul>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "ResidentialSaleListings_Post",
        "requestBody": {
          "description": "This parameter represents the Residential Sale Listing Details",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/transactions/sales/{id}": {
      "get": {
        "tags": [
          "SaleTransactions"
        ],
        "summary": "SaleTransactions_Get",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#STGET').toggle();\" />\r\n  <div id=\"STGET\">\r\n    <ul>\r\n      <li>This method is to get Commercial/Residential Sale Transaction details by passing TransactionGUID or ProviderIdentifier</li>\r\n      <li>This will be primarily called as a result of a delta call or after adding a new Transaction</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>If a Sale Transaction does not exist in our system for the Transaction GUID/ProviderIdentifier supplied, the method will return �HTTP 404 - Not Found� error</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "SaleTransactions_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the Transaction. It can be either Transaction GUID or Transaction ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Transaction GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SaleTransactions"
        ],
        "summary": "SaleTransactions_Put",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#STPUT').toggle();\" />\r\n  <div id=\"STPUT\">\r\n    <ul>\r\n      <li>This method will be used to update an existing Sale Transaction</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <b>\r\n        <u>Mandatory Fields:</u>\r\n      </b>\r\n      <ul>\r\n        <li>Parameter - id (TransactionGUID/ProviderIdentifier)</li>\r\n        <li>ListingOffice or SalesOffice (or both) (Office GUID OR ProviderIdentifier (can be provided only by the office provider) OR Company ID &amp; Office ID)</li>\r\n        <li>IsCommercial</li>\r\n        <li>SalePrice</li>\r\n        <li>Currency (Code or Name)</li>\r\n        <li>PropertyType (Code or Description)</li>\r\n        <li>PropertyAddress</li>\r\n        <li>ListingDetails</li>\r\n        <ul>\r\n          <li>ListPrice</li>\r\n          <li>ListedDate</li>\r\n          <li>Currency (Code or Name)</li>\r\n          <li>Office</li>\r\n          <li>PrimaryMLS</li>\r\n        </ul>\r\n        <li>ContractOn</li>\r\n        <li>ListSideGrossCommission</li>\r\n        <li>BuyingSideAgents</li>\r\n        <ul>\r\n          <li>Agent</li>\r\n          <ul>\r\n            <li>FirstName</li>\r\n            <li>LastName</li>\r\n            <li>PrimaryEmailAddress</li>\r\n          </ul>\r\n        </ul>\r\n      </ul>\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All Mandatory fields must be supplied while adding/updating a Transaction</li>\r\n        <li>ContractOn Date must not be in the future</li>\r\n        <li>ClosedOn Date must not be in the future</li>\r\n        <li>The transaction can be updated only within 90 days from the Closing Reported Date</li>\r\n        <li>ContractOn Date must be prior to ClosedOn Date</li>\r\n        <li>Total Participation percentage for all list side agents must be equal to 100%</li>\r\n        <li>There must be only one primary agent on List side</li>\r\n        <li>Total Participation percentage for all Buy side agents must be equal to 100%</li>\r\n        <li>There must be only one primary agent on Buy side</li>\r\n        <li>List Side Agent (if supplied) must exist in the company of the List Side Office</li>\r\n        <li>Buy Side Agent (if supplied) must exist in the company of the Buy Side Office</li>\r\n        <li>Transaction can be associated with de-active Agent with deactivate Sales Position within last 1 year from today�s date.</li>\r\n        <li>Total ListSide Referral amount must not be greater that the List Side Gross Commission</li>\r\n        <li>Total BuySide Referral amount must not be greater that the Buy Side Gross Commission</li>\r\n        <li>Total Referral amount must not be greater that the Total Gross Commission</li>\r\n        <li>Transaction cannot be supplied as cancelled while adding</li>\r\n        <li>Adjusted Gross Commission (Gross Commission (GC) � Other Company (OC) Split Commission  - Deductible Referral Fee) must be greater than or equal to Zero</li>\r\n        <li>If the Transaction is on the Listing Side, then referrals are allowed only on the List Side</li>\r\n        <li>If the Transaction is on the Buying Side, then referrals are allowed only on the Buy Side</li>\r\n        <li>If the Transaction is on the Listing Side, then Seller Information is mandatory</li>\r\n        <li>If the Transaction is on the Buying Side, then Buyer Information is mandatory</li>\r\n        <li>If the Transaction is representing both Listing and buying side, then Seller and Buyer information is mandatory</li>\r\n        <li>List Side and Buy side agent should have at least one producing role</li>\r\n        <li>ListSide agent commission should not exceed the List Side Adjusted Gross Commission</li>\r\n        <li>BuySide agent commission should not exceed the Buy Side Adjusted Gross Commission</li>\r\n        <li>ClosedOn date must not be prior to office open date</li>\r\n        <li>CancelDate must not be prior to ContractOn date</li>\r\n        <li>The Reporting Office must be an Open Office</li>\r\n        <li>Only buying side cancelled transactions can be re-opened</li>\r\n        <li>Transaction type is not allowed to be changed</li>\r\n        <li>ContractOn date must be prior to ListingActiveSince date</li>\r\n        <li>Transaction, once closed cannot be revoked</li>\r\n        <li>Transaction, once cancelled cannot be revoked</li>\r\n        <li>The valid Transaction Statuses that can be supplied are:</li>\r\n        <ul>\r\n          <li>Pending</li>\r\n          <li>Closed</li>\r\n          <li>Cancelled</li>\r\n        </ul>\r\n        <li>\r\n                While adding a transaction, either the Status or equivalent dates or combination of Status and Dates can be supplied. <br />\r\n                If only Status is supplied, the dates will be defaulted/protected (if exists in our system). Dates defaulted (defaulted to current date) for each status is:\r\n                <ul><li>Pending</li><ul><li>ContractOn</li><li>EstimatedClosedOn</li></ul><li>Closed</li><ul><li>ContractOn</li><li>EstimatedClosedOn</li><li>ClosedDate</li></ul><li>Cancelled</li><ul><li>CancelledOn</li></ul></ul></li>\r\n        <li>If only dates are supplied, then the status will be derived based on the dates.</li>\r\n        <ul>\r\n          <li>ContractOn</li>\r\n          <ul>\r\n            <li>Pending</li>\r\n          </ul>\r\n          <li>ClosedOn (along with ContractOn)</li>\r\n          <ul>\r\n            <li>Closed</li>\r\n          </ul>\r\n          <li>CancelledOn</li>\r\n          <ul>\r\n            <li>Cancelled</li>\r\n          </ul>\r\n        </ul>\r\n        <li>If both status and dates are supplied, then the status and dates will be validated as below.</li>\r\n        <ul>\r\n          <li>Pending - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ContractOn</li>\r\n          </ul>\r\n          <li>Closed - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ContractOn</li>\r\n            <li>ClosedDate</li>\r\n          </ul>\r\n          <li>Cancelled - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ContractOn</li>\r\n            <li>CancelledOn</li>\r\n          </ul>\r\n        </ul>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "SaleTransactions_Put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the Transaction. It can be either Transaction GUID or Transaction ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Transaction GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This parameter represents the Sale Transaction details",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/transactions/sales": {
      "post": {
        "tags": [
          "SaleTransactions"
        ],
        "summary": "SaleTransactions_Post",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#STPOST').toggle();\" />\r\n  <div id=\"STPOST\">\r\n    <ul>\r\n      <li>This method will be used to add a new Sale Transaction</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <b>\r\n        <u>Mandatory Fields:</u>\r\n      </b>\r\n      <ul>\r\n        <li>ProviderIdentifier</li>\r\n        <li>ListingOffice or SalesOffice (or both) (Office GUID OR ProviderIdentifier (can be provided only by the office provider) OR Company ID &amp; Office ID)</li>\r\n        <li>IsCommercial</li>\r\n        <li>SalePrice</li>\r\n        <li>Currency (Code or Name)</li>\r\n        <li>PropertyType (Code or Description)</li>\r\n        <li>PropertyAddress</li>\r\n        <li>ListingDetails</li>\r\n        <ul>\r\n          <li>ListPrice</li>\r\n          <li>Currency (Code or Name)</li>\r\n          <li>Office</li>\r\n        </ul>\r\n        <li>Dates or Status</li>\r\n        <li>ListSideGrossCommission in case of OL and IH and SaleSideCommission in case of OS</li>\r\n        <li>Agents</li>\r\n        <ul>\r\n          <li>Agent</li>\r\n          <ul>\r\n            <li>CompanyStaff GUID/Staff ProviderIdentifier</li>\r\n            <li>IsPrimary</li>\r\n            <li>Commission Percentage</li>\r\n          </ul>\r\n        </ul>\r\n      </ul>\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All Mandatory fields must be supplied while adding/updating a Transaction</li>\r\n        <li>ContractOn Date must not be in the future</li>\r\n        <li>ClosedOn Date must not be in the future</li>\r\n        <li>ContractOn Date must be prior to ClosedOn Date</li>\r\n        <li>Total Participation percentage for all list side agents must be equal to 100%</li>\r\n        <li>There must be only one primary agent on List side</li>\r\n        <li>Total Participation percentage for all Buy side agents must be equal to 100%</li>\r\n        <li>There must be only one primary agent on Buy side</li>\r\n        <li>List Side Agent (if supplied) must exist in the company of the List Side Office</li>\r\n        <li>Buy Side Agent (if supplied) must exist in the company of the Buy Side Office</li>\r\n        <li>Transaction can be associated with de-active Agent with deactivate Sales Position within last 1 year from today�s date.</li>\r\n        <li>Total ListSide Referral amount must not be greater that the List Side Gross Commission</li>\r\n        <li>Total BuySide Referral amount must not be greater that the Buy Side Gross Commission</li>\r\n        <li>Total Referral amount must not be greater that the Total Gross Commission</li>\r\n        <li>Transaction cannot be supplied as cancelled while adding</li>\r\n        <li>Adjusted Gross Commission (Gross Commission (GC) � Other Company (OC) Split Commission  - Deductible Referral Fee) must be greater than or equal to Zero</li>\r\n        <li>If the Transaction is on the Listing Side, then referrals are allowed only on the List Side - If Buying side referrals is supplied, it will be ignored</li>\r\n        <li>If the Transaction is on the Buying Side, then referrals are allowed only on the Buy Side - If Selling side referrals is supplied, it will be ignored</li>\r\n        <li>If the Transaction is on the Listing Side, then Seller Information is mandatory</li>\r\n        <li>If the Transaction is on the Buying Side, then Buyer Information is mandatory</li>\r\n        <li>If the Transaction is representing both Listing and buying side, then Seller and Buyer information is mandatory</li>\r\n        <li>List Side and Buy side agent should have at least one producing role</li>\r\n        <li>ListSide agent commission should not exceed the List Side Adjusted Gross Commission</li>\r\n        <li>BuySide agent commission should not exceed the Buy Side Adjusted Gross Commission</li>\r\n        <li>ClosedOn date must not be prior to office open date</li>\r\n        <li>The Reporting Office must be an Open Office</li>\r\n        <li>Only buying side cancelled transactions can be re-opened</li>\r\n        <li>Transaction type is not allowed to be changed</li>\r\n        <li>ContractOn date must be prior to ListingActiveSince date</li>\r\n        <li>The valid Transaction Statuses that can be supplied are:</li>\r\n        <ul>\r\n          <li>Pending</li>\r\n          <li>Closed</li>\r\n        </ul>\r\n        <li>\r\n                While adding a Transaction, either the Status or equivalent dates or combination of Status and Dates can be supplied. <br />\r\n                If only Status is supplied, the dates will be defaulted. Dates defaulted (defaulted to current date) for each status is:\r\n                <ul><li>Pending</li><ul><li>ContractOn</li><li>EstimatedClosedOn</li></ul><li>Closed</li><ul><li>ContractOn</li><li>EstimatedClosedOn</li><li>ClosedDate</li></ul></ul></li>\r\n        <li>If only dates are supplied, then the status will be derived based on the dates.</li>\r\n        <ul>\r\n          <li>ContractOn</li>\r\n          <ul>\r\n            <li>Pending</li>\r\n          </ul>\r\n          <li>ClosedOn (along with ContractOn)</li>\r\n          <ul>\r\n            <li>Closed</li>\r\n          </ul>\r\n        </ul>\r\n        <li>If both status and dates are supplied, then the status and dates will be validated as below.</li>\r\n        <ul>\r\n          <li>Pending - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ContractOn</li>\r\n          </ul>\r\n          <li>Closed - Only Dates that must be supplied are:</li>\r\n          <ul>\r\n            <li>ContractOn</li>\r\n            <li>ClosedDate</li>\r\n          </ul>\r\n        </ul>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "SaleTransactions_Post",
        "requestBody": {
          "description": "This parameter represents the Sale Transaction details",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/teams/{id}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Teams_Get",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#TGET').toggle();\" />\r\n  <div id=\"TGET\">\r\n    <ul>\r\n      <li>This method is to get the Team details by passing Team GUID or ProviderIdentifier</li>\r\n      <li>This will be primarily called as a result of a delta call</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>The parameter - idType is mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id must be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>If Team GUID does not exists in our system, API will return �HTTP 404 - Not Found� status code.</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Teams_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the Team. It can be either Team GUID or ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if Team GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/teams/delta": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Teams_Delta",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#TDELTA').toggle();\" />\r\n  <div id=\"TDELTA\">\r\n    <ul>\r\n      <li>This method will return list of Team GUIDs (if available) that are created or modified between fromDate and toDate</li>\r\n      <li>The results can be filtered by brand or list of RFG Company IDs</li>\r\n      <li>The Date-Time format supported is standard date-time format (yyyy-MM-ddThh:mm:ss[.fffffff]). Example: 2015-02-13T06:40:48.937</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>FromDate is mandatory</li>\r\n        <li>If toDate is not supplied, system will take today's date</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Teams_Delta",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This parameter represents the Date from which the delta operation needs to be performed. <br />\r\nDataType: DateTime with offset (Standard formats allowed are - yyyy-MM-ddThh:mm:ss[.fffffff] zzz. Any DateTime without offset will be considered as Eastern Time)<br />\r\nExample: 2015-02-13T06:40:48.937-04:00",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This parameter represents the Date to which the delta operation needs to be performed. <br />\r\nDataType: DateTime with offset (Standard formats allowed are - yyyy-MM-ddThh:mm:ss[.fffffff] zzz. Any DateTime without offset will be considered as Eastern Time)<br />\r\nExample: 2015-02-13T06:40:48.937-04:00",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brandCode",
            "in": "query",
            "description": "This parameter represents the Brand Code",
            "schema": {
              "enum": [
                "BHG",
                "C21",
                "CB",
                "CBC",
                "ERA",
                "SIR",
                "ZAP",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyIds",
            "in": "query",
            "description": "This parameter represents the List of RFG Company IDs to be used for filtering the delta search results",
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "isLastUpdatedBy",
            "in": "query",
            "description": "If isLastUpdatedBy is true then Teams are displayed which are not updated by current user. If isLastUpdatedBy is false then all the Teams are displayed",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/teams/bycompany": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Teams_SearchByCompany",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#GTBC').toggle();\" />\r\n  <div id=\"GTBC\">\r\n    <ul>\r\n      <li>This method will be used to get the summary of all active Teams for the provided Company GUID</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>The parameter - companyGuid is mandatory</li>\r\n        <li>This method will return teams only for Company GUID of active companies</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Teams_SearchByCompany",
        "parameters": [
          {
            "name": "companyGuid",
            "in": "query",
            "description": "Format - uuid. This parameter represents the Company GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Teams_Search",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#GTBC').toggle();\" />\r\n  <div id=\"GTBC\">\r\n    <ul>\r\n      <li>This method will be used to search all the teams by specifying one or more search criteria.</li>\r\n      <li>The search will return teams which are active and de-active.</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Mandatory Fields:</u>\r\n      </b>\r\n      <ol>\r\n        <li>CompanyGuid or CompanyID or TeamID or TeamName</li>\r\n      </ol>\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All the Mandatory fields must be supplied</li>\r\n        <li>This method will only return teams belonging to active companies</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Teams_Search",
        "parameters": [
          {
            "name": "brand",
            "in": "query",
            "description": "This parameter represents the brand.",
            "required": true,
            "schema": {
              "enum": [
                "BHG",
                "C21",
                "CB",
                "CBC",
                "ERA",
                "SIR",
                "ZAP",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyGuid",
            "in": "query",
            "description": "Format - uuid. This parameter represents the Unique identifier of the company to which the team belongs to.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "This parameter represents Company Id to which the team belongs to.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "query",
            "description": "This parameter represents the Team Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamName",
            "in": "query",
            "description": "This parameter represents the Team Name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "This parameter represents the status of the team",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Transactions_Search",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#ST').toggle();\" />\r\n  <div id=\"ST\">\r\n    <ul>\r\n      <li>This method will be used to search transactions</li>\r\n      <li>The search will only return Transactions of type - Sale Transaction (Residential and Commercial) and Other Income Transaction (Residential and Commercial)</li>\r\n      <li>The search will be an AND based search and will show the results that satisfy all the criteria provided</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Mandatory Fields:</u>\r\n      </b>\r\n      <ul>\r\n        <li>OfficeGUID</li>\r\n      </ul>\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All Mandatory fields must be supplied while adding/updating a Transaction</li>\r\n        <li>The supplied Office GUID must correspond to an open/executed offices</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Transactions_Search",
        "parameters": [
          {
            "name": "criteria.transactionTypeCode",
            "in": "query",
            "description": "This attribute represents the code value of the type of transaction. \r\nThe list of available codes can be obtained by calling method - CodeValuesGet (/codevalues), passing categoryName as TransactionType<br />\r\nExamples: 01,03 etc.<br />\r\nMax Length: 6 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.transactionTypeDescription",
            "in": "query",
            "description": "This attribute represents the type of transaction (description). \r\nThe list of available descriptions can be obtained by calling method - CodeValuesGet (/codevalues), passing categoryName as TransactionType<br />\r\nExamples: Residential Sale, Commercial Sale etc.<br />\r\nMax Length: 150 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.officeGuid",
            "in": "query",
            "description": "Format - uuid. This attribute represents the GUID information of the Office.\r\nThis attribute will be used as search criteria to search and fetch the results.\r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.agentGuid",
            "in": "query",
            "description": "Format - uuid. This attribute represents the GUID information of the Agent.\r\nThis attribute will be used as search criteria to search and fetch the results.\r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.mlsId",
            "in": "query",
            "description": "This attribute represents the numeric identifier issued by some Multiple Listing Service Boards to local real estate agents.\r\nThis attribute will be used as search criteria to search and fetch the results.<br />\r\nMax Length: 50 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.transactionId",
            "in": "query",
            "description": "This attribute represents the Transaction Id and is a read-only field. <br />\r\nMax Length: 20 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.addressLine1",
            "in": "query",
            "description": "This attribute represents the Address Line 1 information.<br />\r\nMax Length: 200 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.city",
            "in": "query",
            "description": "This attribute represents the City Name<br />\r\nMax Length: 60 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.postalCode",
            "in": "query",
            "description": "This attribute represents the PostalCode information.<br />\r\nMax Length: 15 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.stateProvinceCode",
            "in": "query",
            "description": "This attribute represents the StateProvince information.<br />\r\nMax Length: 4 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.stateProvinceName",
            "in": "query",
            "description": "This attribute represents the StateProvince information.<br />\r\nMax Length: 100 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.countryCode",
            "in": "query",
            "description": "This attribute represents the Country ISO Code<br />\r\nMax Length: 2 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.countryName",
            "in": "query",
            "description": "This attribute represents the Country Name.<br />\r\nMax Length: 100 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.activeSince",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This attribute represents Listed Since date. The search will look for transactions which are listed since the provided date    \r\nDataType: Date (Standard formats allowed are - yyyy-MM-dd OR MM/dd/yy OR MM/dd/yyyy OR dd-MMM-yy)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.pendingSince",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339).  This attribute represents Pending Since date. The search will look for transactions which are in pending status since the provided date\r\nDataType: Date (Standard formats allowed are - yyyy-MM-dd OR MM/dd/yy OR MM/dd/yyyy OR dd-MMM-yy)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.closedSince",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This attribute represents Closed Since date. The search will look for transactions which are closed since the provided date\r\nDataType: Date (Standard formats allowed are - yyyy-MM-dd OR MM/dd/yy OR MM/dd/yyyy OR dd-MMM-yy)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.statusCode",
            "in": "query",
            "description": "This attribute represents the code value of the status of transaction. \r\nThe list of available codes can be obtained by calling method - CodeValuesGet (/codevalues), passing categoryName as <br />\r\nExamples: <br />\r\nMax Length: 6 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.statusDescription",
            "in": "query",
            "description": "This attribute represents the description value of the status of transaction. \r\nThe list of available descriptions can be obtained by calling method - CodeValuesGet (/codevalues), passing categoryName as <br />\r\nExamples:<br />\r\nMax Length: 150 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.seller.firstName",
            "in": "query",
            "description": "This attribute represents the First Name of the person",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.seller.lastName",
            "in": "query",
            "description": "This attribute represents the Last Name of the person",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.seller.businessEntityName",
            "in": "query",
            "description": "This attribute represents the Business Entity Name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.seller.emailAddress",
            "in": "query",
            "description": "This attribute represents Primary Email address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.seller.phoneNumber",
            "in": "query",
            "description": "This attribute represents Primary Phone",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.seller.addressLine1",
            "in": "query",
            "description": "This attribute represents the Address Line 1 information.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.seller.city",
            "in": "query",
            "description": "This attribute represents the City information.<br />\r\nMax Length: 60 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.seller.postalCode",
            "in": "query",
            "description": "This attribute represents the PostalCode information.<br />\r\nMax Length: 15 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.seller.stateProvinceCode",
            "in": "query",
            "description": "This attribute represents the StateProvince information. <br />\r\nMax Length: 4 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.seller.stateProvinceName",
            "in": "query",
            "description": "This attribute represents the StateProvince information.<br />\r\nMax Length: 100 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.seller.countryCode",
            "in": "query",
            "description": "This attribute represents the Country ISO Code<br />\r\nMax Length: 2 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.seller.countryName",
            "in": "query",
            "description": "This attribute represents the Country Name.<br />\r\nMax Length: 100 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyer.firstName",
            "in": "query",
            "description": "This attribute represents the First Name of the person",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyer.lastName",
            "in": "query",
            "description": "This attribute represents the Last Name of the person",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyer.businessEntityName",
            "in": "query",
            "description": "This attribute represents the Business Entity Name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyer.emailAddress",
            "in": "query",
            "description": "This attribute represents Primary Email address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyer.phoneNumber",
            "in": "query",
            "description": "This attribute represents Primary Phone",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyer.addressLine1",
            "in": "query",
            "description": "This attribute represents the Address Line 1 information.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyer.city",
            "in": "query",
            "description": "This attribute represents the City information.<br />\r\nMax Length: 60 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyer.postalCode",
            "in": "query",
            "description": "This attribute represents the PostalCode information.<br />\r\nMax Length: 15 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyer.stateProvinceCode",
            "in": "query",
            "description": "This attribute represents the StateProvince information. <br />\r\nMax Length: 4 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyer.stateProvinceName",
            "in": "query",
            "description": "This attribute represents the StateProvince information.<br />\r\nMax Length: 100 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyer.countryCode",
            "in": "query",
            "description": "This attribute represents the Country ISO Code<br />\r\nMax Length: 2 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyer.countryName",
            "in": "query",
            "description": "This attribute represents the Country Name.<br />\r\nMax Length: 100 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyerBusinessEntity.firstName",
            "in": "query",
            "description": "This attribute represents the First Name of the person",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyerBusinessEntity.lastName",
            "in": "query",
            "description": "This attribute represents the Last Name of the person",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyerBusinessEntity.businessEntityName",
            "in": "query",
            "description": "This attribute represents the Business Entity Name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyerBusinessEntity.emailAddress",
            "in": "query",
            "description": "This attribute represents Primary Email address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyerBusinessEntity.phoneNumber",
            "in": "query",
            "description": "This attribute represents Primary Phone",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyerBusinessEntity.addressLine1",
            "in": "query",
            "description": "This attribute represents the Address Line 1 information.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyerBusinessEntity.city",
            "in": "query",
            "description": "This attribute represents the City information.<br />\r\nMax Length: 60 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyerBusinessEntity.postalCode",
            "in": "query",
            "description": "This attribute represents the PostalCode information.<br />\r\nMax Length: 15 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyerBusinessEntity.stateProvinceCode",
            "in": "query",
            "description": "This attribute represents the StateProvince information. <br />\r\nMax Length: 4 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyerBusinessEntity.stateProvinceName",
            "in": "query",
            "description": "This attribute represents the StateProvince information.<br />\r\nMax Length: 100 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyerBusinessEntity.countryCode",
            "in": "query",
            "description": "This attribute represents the Country ISO Code<br />\r\nMax Length: 2 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.buyerBusinessEntity.countryName",
            "in": "query",
            "description": "This attribute represents the Country Name.<br />\r\nMax Length: 100 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.sellerBusinessEntity.firstName",
            "in": "query",
            "description": "This attribute represents the First Name of the person",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.sellerBusinessEntity.lastName",
            "in": "query",
            "description": "This attribute represents the Last Name of the person",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.sellerBusinessEntity.businessEntityName",
            "in": "query",
            "description": "This attribute represents the Business Entity Name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.sellerBusinessEntity.emailAddress",
            "in": "query",
            "description": "This attribute represents Primary Email address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.sellerBusinessEntity.phoneNumber",
            "in": "query",
            "description": "This attribute represents Primary Phone",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.sellerBusinessEntity.addressLine1",
            "in": "query",
            "description": "This attribute represents the Address Line 1 information.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.sellerBusinessEntity.city",
            "in": "query",
            "description": "This attribute represents the City information.<br />\r\nMax Length: 60 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.sellerBusinessEntity.postalCode",
            "in": "query",
            "description": "This attribute represents the PostalCode information.<br />\r\nMax Length: 15 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.sellerBusinessEntity.stateProvinceCode",
            "in": "query",
            "description": "This attribute represents the StateProvince information. <br />\r\nMax Length: 4 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.sellerBusinessEntity.stateProvinceName",
            "in": "query",
            "description": "This attribute represents the StateProvince information.<br />\r\nMax Length: 100 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.sellerBusinessEntity.countryCode",
            "in": "query",
            "description": "This attribute represents the Country ISO Code<br />\r\nMax Length: 2 characters",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteria.sellerBusinessEntity.countryName",
            "in": "query",
            "description": "This attribute represents the Country Name.<br />\r\nMax Length: 100 characters",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/transactions/byoffice": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Transactions_SearchByOffice",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#GTRBO').toggle();\" />\r\n  <div id=\"GTRBO\">\r\n    <ul>\r\n      <li>This method will be used to get the summary of all transactions reported by the Office for the specified Office GUID</li>\r\n      <li>The search will only return Transactions of type - Sale Transaction (Residential and Commercial) and Other Income Transaction (Residential and Commercial)</li>\r\n      <li>This will be primarily used to sync all the transactions for an office</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>The supplied Office GUID must correspond to an open/executed Office</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Transactions_SearchByOffice",
        "parameters": [
          {
            "name": "officeGuid",
            "in": "query",
            "description": "Format - uuid. This parameter represents the Office GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/transactions/bycompany": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Transactions_SearchByCompany",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#GTRBC').toggle();\" />\r\n  <div id=\"GTRBC\">\r\n    <ul>\r\n      <li>This method will be used to get the summary of all transactions reported by the Company for the specified Company GUID</li>\r\n      <li>The search will only return Transactions of type - Sale Transaction (Residential and Commercial) and Other Income Transaction (Residential and Commercial)</li>\r\n      <li>This will be primarily used to sync all the transactions for a company</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>The supplied Company GUID must correspond to an active Company</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Transactions_SearchByCompany",
        "parameters": [
          {
            "name": "companyGuid",
            "in": "query",
            "description": "Format - uuid. This parameter represents the Company GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/transactions/delta": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Transactions_Delta",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#STDELTA').toggle();\" />\r\n  <div id=\"STDELTA\">\r\n    <ul>\r\n      <li>This method will return list of Transaction GUIDs (if available) that are created or modified between fromDate and toDate.</li>\r\n      <li>The results can be filtered by brand or list of RFG Company IDs or Transaction Type Code (The list of available codes can be obtained by calling method - CodeValuesGet (/codevalues), passing categoryName as TransactionType)</li>\r\n      <li>The Date-Time format supported is standard date-time format (yyyy-MM-ddThh:mm:ss[.fffffff]). Example: 2015-02-13T06:40:48.937</li>\r\n      <li>This Method will only return results for transaction types - Sale Transaction (Residential and Commercial) and Other Income Transaction (Residential and Commercial)</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>FromDate is mandatory</li>\r\n        <li>If toDate is not supplied, system will take today's date</li>\r\n        <li>The fromDate must not be in Future</li>\r\n        <li>The toDate must not be before fromDate</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Transactions_Delta",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This parameter represents the Date from which the delta operation needs to be performed. <br />\r\nDataType: DateTime with offset (Standard formats allowed are - yyyy-MM-ddThh:mm:ss[.fffffff] zzz. Any DateTime without offset will be considered as Eastern Time)<br />\r\nExample: 2015-02-13T06:40:48.937-04:00",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This parameter represents the Date to which the delta operation needs to be performed. <br />\r\nDataType: DateTime with offset (Standard formats allowed are - yyyy-MM-ddThh:mm:ss[.fffffff] zzz. Any DateTime without offset will be considered as Eastern Time)<br />\r\nExample: 2015-02-13T06:40:48.937-04:00",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brandCode",
            "in": "query",
            "description": "This parameter represents the Brand Code",
            "schema": {
              "enum": [
                "BHG",
                "C21",
                "CB",
                "CBC",
                "ERA",
                "SIR",
                "ZAP",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyIds",
            "in": "query",
            "description": "This parameter represents the List of RFG Company IDs to be used for filtering the delta search results",
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "transactionType",
            "in": "query",
            "description": "This parameter represents the Transaction Type code that should be used for filtering the delta search results (eg: Residential Sale, Commercial Sale, Residential OtherIncome and Commercial OtherIncome)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isLastUpdatedBy",
            "in": "query",
            "description": "If isLastUpdatedBy is true then Transactions are displayed which are not updated by current user. If isLastUpdatedBy is false then all the Transactions are displayed",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/users/{personGuid}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Users_Get",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#GETU').toggle();\" />\r\n  <div id=\"GETU\">\r\n    <ul>\r\n      <li>This method will be used by the consumers to get the basic person details with the affiliate roles and corporate titles, if applicable.</li>\r\n      <li>This method will be called to get the affiliate roles/corporate titles for a person who logs in using BTT SSO.</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>If Person GUID supplied does not exists in our system, API will return �HTTP 404 - Not Found� status code.</li>\r\n        <li>Affiliate Roles at company level will not have office data populated. The company information can be read from the company node of Affiliate role.</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Users_Get",
        "parameters": [
          {
            "name": "personGuid",
            "in": "path",
            "description": "Format - uuid. This parameter represents the Person GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/corporatestaff/delta": {
      "get": {
        "tags": [
          "CorporateStaff"
        ],
        "summary": "CorporateStaff_Delta",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#CSDELTA').toggle();\" />\r\n  <div id=\"CSDELTA\">\r\n    <ul>\r\n      <li>This method will be used to get the list of Corporate Staff that were updated (created or modified) over the specified period of time (fromDate and toDate).</li>\r\n      <li>The results can be filtered by brand</li>\r\n      <li>The DateTime format supported is standard date-time format (yyyy-MM-ddThh:mm:ss[.fffffff]). Example: 2015-02-13T06:40:48.937</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>FromDate is mandatory</li>\r\n        <li>If toDate is not supplied, system will take today's date</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CorporateStaff_Delta",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This parameter represents the Date from which the delta operation needs to be performed. <br />\r\nDataType: DateTime with offset (Standard formats allowed are - yyyy-MM-ddThh:mm:ss[.fffffff] zzz. Any DateTime without offset will be considered as Eastern Time)<br />\r\nExample: 2015-02-13T06:40:48.937-04:00",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This parameter represents the Date to which the delta operation needs to be performed. <br />\r\nDataType: DateTime with offset (Standard formats allowed are - yyyy-MM-ddThh:mm:ss[.fffffff] zzz. Any DateTime without offset will be considered as Eastern Time)<br />\r\nExample: 2015-02-13T06:40:48.937-04:00",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brandCode",
            "in": "query",
            "description": "This parameter represents the Brand Code",
            "schema": {
              "enum": [
                "BHG",
                "C21",
                "CB",
                "CBC",
                "ERA",
                "SIR",
                "ZAP",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "isLastUpdatedBy",
            "in": "query",
            "description": "If isLastUpdatedBy is true then CorporateStaff are displayed which are not updated by current user. If isLastUpdatedBy is false then all the CorporateStaff are displayed",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/corporatestaff/{corporateStaffGuid}": {
      "get": {
        "tags": [
          "CorporateStaff"
        ],
        "summary": "CorporateStaff_Get",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#GETCU').toggle();\" />\r\n  <div id=\"GETCU\">\r\n    <ul>\r\n      <li>This method is to get the Corporate staff details by passing CorporateStaff GUID</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>If Corporate staff GUID supplied does not exists in our system, API will return �HTTP 404 - Not Found� status code.</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CorporateStaff_Get",
        "parameters": [
          {
            "name": "corporateStaffGuid",
            "in": "path",
            "description": "Format - uuid. This parameter represents the CorporateStaff GUID. \r\nThis will be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/buyersellertransactions": {
      "get": {
        "tags": [
          "BuyerSellerTransactions"
        ],
        "summary": "BuyerSellerTransactions_Search",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#CSDELTA').toggle();\" />\r\n  <div id=\"CSDELTA\">\r\n    <br />\r\n          This method is used to search for the Buyer/Seller who participated in a transaction for the brand.\r\n          <div class=\"businessRule\"><br /><b><u>Business Rules:</u></b><ol><li>Company GUID is mandatory</li></ol></div></div>\r\n</remarks>",
        "operationId": "BuyerSellerTransactions_Search",
        "parameters": [
          {
            "name": "companyGuid",
            "in": "query",
            "description": "Format - uuid. This parameter represents the Company GUID. This is a required parameter and the value should be the Company GUID of the Company for which the Buyer/Seller Search need to be performed.\r\nThis should be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "officeGuid",
            "in": "query",
            "description": "This parameter represents the Office GUID. This is a collection and the value should be the Office GUID of the Office for which the Buyer/Seller Search need to be performed.\r\nThis should be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "transactionType",
            "in": "query",
            "description": "This parameter represents the type of the transaction for which the Buyer/Seller should be searched for. The allowed values are Residential Sale, Commercial Sale",
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "isListSide",
            "in": "query",
            "description": "This parameter indicates whether a buyer/seller needs to be searched for i.e. if the value is set to true, the search will be performed to pick the Seller and if the value is set to false, the search will be performed to pick the Buyer. If the value is not passed, then the operation will search for all the types.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isPerson",
            "in": "query",
            "description": "This parameter indicates whether the operation should search for Persons or Business Entities. If the value is not passed, both Person and Business Entities will be searched",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "myBuyerSellerOnly",
            "in": "query",
            "description": "This parameter indicates whether the operation should search for Buyer/Seller who were part of my transactions. If the value is not passed, all buyer and seller for my brokerage transaction will be returned",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "stateProvince",
            "in": "query",
            "description": "This parameter represents the state province of the property for which the Buyer/Seller should be be searched for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city",
            "in": "query",
            "description": "This parameter represents the city of the property for which the Buyer/Seller should be be searched for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postalCode",
            "in": "query",
            "description": "This parameter represents the Postal Code of the property for which the Buyer/Seller should be be searched for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxCloseDate",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This parameter represents the maximum close date of the transaction for which the Buyer/Seller should be be searched for.\r\nDataType: Date (Standard formats allowed are - yyyy-MM-dd OR MM/dd/yy OR MM/dd/yyyy OR dd-MMM-yy)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minCloseDate",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). This parameter represents the minimum close date of the transaction for which the Buyer/Seller should be be searched for.\r\nDataType: Date (Standard formats allowed are - yyyy-MM-dd OR MM/dd/yy OR MM/dd/yyyy OR dd-MMM-yy)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxClosingPrice",
            "in": "query",
            "description": "Format - double. This parameter represents the maximum closing price of the transaction for which the Buyer/Seller should be be searched for",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minClosingPrice",
            "in": "query",
            "description": "Format - double. This parameter represents the minimum closing price of the transaction for which the Buyer/Seller should be be searched for",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "This parameter represents the attribute name based on which the result should be sorted. The allowed values are ClosedDate, ClosingPrice",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "This parameter represents the order in which the results should be sorted. The allowed values are  Asc, Desc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "Format - int32. This parameter represents number of records in the queried collection to be included in the result\r\nDefault Value: 100\r\nMax Value: 1000",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Format - int32. This parameter represents number of records in the queried collection that are to be skipped and not included in the result\r\nDefault Value: 0\r\nMax Value: 100000",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "agentGuid",
            "in": "query",
            "description": "Format - uuid. This parameter represents the Agent GUID and value should be the Agent GUID for which the Buyer/Seller Search need to be performed.\r\nThis should be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hasActiveAgent",
            "in": "query",
            "description": "This parameter indicates whether the operation should search for active or in-active associated agents to transactions. If the value is not passed, search includes both active and in-active associated agents to transactions",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/buyersellertransactions/{guid}": {
      "get": {
        "tags": [
          "BuyerSellerTransactions"
        ],
        "summary": "BuyerSellerTransactions_Get",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#GETCU').toggle();\" />\r\n  <div id=\"GETCU\">\r\n    <br />\r\n          This method is to get the details of the Buyer/Seller for a transaction by passing the identifier for the Buyer/Seller for a transaction\r\n          <div class=\"businessRule\"><br /><b><u>Business Rules:</u></b><ol><li>BuyerSeller Transaction Guid is mandatory</li></ol></div></div>\r\n</remarks>",
        "operationId": "BuyerSellerTransactions_Get",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Format - uuid. Unique identifier of the Buyer/Seller for the transaction. This should be always of the format 32 hexadecimal digits separated by hyphens. <br />\r\nDataType: GUID (format: 00000000-0000-0000-0000-000000000000) <br />\r\nExample: 13a7337c-45e3-4eb4-a2b2-ee489b56ec8e",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/companyStaff/{id}/media": {
      "patch": {
        "tags": [
          "CompanyStaff"
        ],
        "summary": "CompanyStaff_PatchMedia",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#SPUTP').toggle();\" />\r\n  <div id=\"SPUTP\">\r\n    <ul>\r\n      <li>This method will be used to append a media item or a collection of media items to a Company staff using the Company staff GUID or ProviderIdentifier</li>\r\n      <li>All media items for the listing will be replaced with the supplied media items</li>\r\n      <li>This method will replace only those media items which were supplied by the provider</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All the Mandatory fields must be provided</li>\r\n        <li>The parameters - idType, media and isReplace are mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id should be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>There should not be multiple Media Captions with the same language for each media item</li>\r\n        <li>If a  Company staff does not exists in our system for the  Company staff GUID provided, the method will return �HTTP 404 - Not Found� error</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "CompanyStaff_PatchMedia",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the company staff. It can be either company staff GUID or company staff ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if company staff GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This parameter represents the Collection of Media",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/offices/{id}/media": {
      "patch": {
        "tags": [
          "Offices"
        ],
        "summary": "Offices_PatchOfficeMedia",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#SPUTP').toggle();\" />\r\n  <div id=\"SPUTP\">\r\n    <ul>\r\n      <li>This method will be used to append a media item or a collection of media items to a Office using the office GUID or ProviderIdentifier</li>\r\n      <li>All media items for the office will be replaced with the supplied media items</li>\r\n      <li>This method will replace only those media items which were supplied by the provider</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All the Mandatory fields must be provided</li>\r\n        <li>The parameters - idType, media and isReplace are mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id should be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>There should not be multiple Media Captions with the same language for each media item</li>\r\n        <li>If a office does not exists in our system for the office GUID provided, the method will return �HTTP 404 - Not Found� error</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Offices_PatchOfficeMedia",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the office. It can be either office GUID or office ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if office GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This parameter represents the Collection of Media",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    },
    "/offices/{id}/officelogomedia": {
      "patch": {
        "tags": [
          "Offices"
        ],
        "summary": "Offices_PatchLogo",
        "description": "<remarks>\r\n  <input type=\"button\" value=\"Show/Hide\" onclick=\"$('#POLM').toggle();\" />\r\n  <div id=\"POLM\">\r\n    <ul>\r\n      <li>This method will be used to append a media item or a collection of media(only Office logo's) items to a Office using the office GUID or ProviderIdentifier</li>\r\n      <li>This method will be used to add/update media for the supplied provider</li>\r\n    </ul>\r\n    <div class=\"businessRule\">\r\n      <br />\r\n      <b>\r\n        <u>Business Rules:</u>\r\n      </b>\r\n      <ol>\r\n        <li>All the Mandatory fields must be provided</li>\r\n        <li>The parameters - idType and media are mandatory</li>\r\n        <li>If the idType supplied is 'id', then the supplied id should be a GUID - 32 hexadecimal digits separated by hyphens (format: 00000000-0000-0000-0000-000000000000)</li>\r\n        <li>There should not be multiple Media Captions with the same language for each media item</li>\r\n        <li>If a office does not exists in our system for the office GUID provided, the method will return �HTTP 404 - Not Found� error</li>\r\n        <li>If User Provides media category is not logo type then the method will return \"Invalid MediaCategory\"</li>\r\n        <li>If User is trying to updated media for other provider then the method will return \"User cannot update media for other Providers\"</li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</remarks>",
        "operationId": "Offices_PatchLogo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter represents the identifier of the office. It can be either office GUID or office ProviderIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "in": "query",
            "description": "This parameter represents the type of the identifier provided. \r\nThe value should be set to \"id\" if office GUID is provided as the identifier. \r\nIf the identifier provided is ProviderIdentifier, the idType should be \"providerid\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This parameter represents the Collection of Media",
          "content": {
            "application/vnd.realogyfg.v1+json": { }
          }
        },
        "responses": {
          "204": {
            "description": "NoContent",
            "content": {
              "application/vnd.realogyfg.v1+json": { }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "apiKeyHeader": {
        "type": "apiKey",
        "name": "Ocp-Apim-Subscription-Key",
        "in": "header"
      },
      "apiKeyQuery": {
        "type": "apiKey",
        "name": "subscription-key",
        "in": "query"
      }
    }
  },
  "security": [
    {
      "apiKeyHeader": [ ]
    },
    {
      "apiKeyQuery": [ ]
    }
  ],
  "x-ms-export-notes": [
    "The exported API contains schemas that aren't of content type 'application/vnd.oai.openapi.components+json', and are hence not exported as OpenAPI components."
  ]
}