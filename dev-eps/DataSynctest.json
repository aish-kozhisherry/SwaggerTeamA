{
  "openapi": "3.0.1",
  "info": {
    "title": "DataSync",
    "description": "Use the DataSync API to synchronize your local data store with the data maintained by Realogy. Use the \"active\" method to do a one-time initialization of your data store and use the \"Delta\" method for each entity type for ongoing synchronization. Details on how to use each of these methods can be found in the method descriptions. Any vendor should be performing the data synchronization as mentioned below: <ol><li>One time initialization &ndash; this should be done only once while initializing data into your system using the API for the first time.</li><ol><li>Call the GetActiveListings method. This method will give all the active listings in the system. This method will give listingId and the lastupdateon for all the listings in the system.</li><li>Now, call the GetListingById for each of the listings to get the details of the listings</li></ol><li>Ongoing synchronization &ndash;</li><ol><li>Call the Delta method for the listings (frequency can be 15 mins to 7 days but the recommended frequency is 30 mins to 2 hours)</li><li>Please add a two minute overlap between subsequent delta calls so that listings updated during the edge time is not missed</li><li>The Delta response will give the list of Listings that got changed along with the full details of the listing</li></ol><li>Periodic Reconciliation - This can be done weekly/biweekly/monthly to ensure that your system is in sync with ours</li><ol><li>Call the GetActiveListings method and for each listing, compare the lastupdateon date which you got in the Active Listings get with the one stored in your system (you should store the lastupdateon field from the Delta Response). Call the GetListingById method for those listings for which there is a difference in the lastupdateon time.</li></ol></ol>",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://stg.api.realogyfg.com/datasync"
    },
    {
      "url": "https://stgrfgbtt.azure-api.net/datasync"
    }
  ],
  "paths": {
    "/agents/delta": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "GetAgentDelta",
        "description": "Use this method to retrieve Agent records that were added/updated (Upserted) or deleted since a specific time. The response will indicate if a particular Agent has been deleted or Upserted and timestamp at which that action occurred. If the Agent was Upserted, the response will include all of the available details for it. Results will be paginated, depending on the \"page size\" you specify and the amount of changes that have occurred. Note that the method will not accept a \"since\" time older than a week. The recommended synchronization frequency is every 1 - 4 hours. If your synchronization process is \"broken\" for over a week, use the \"active\" method to re-synchronize before resuming the regular synchronization process",
        "operationId": "getagentdelta",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). The time from which you need changes from. You should use the format emitted by Date's toJSON method (for example, 2017-04-23T18:25:43.511Z). If a timestamp older than a week is passed, a business rule violation will be thrown which will require the client to change the from date. As a best-practice, for a subsequent call to this method, send the timestamp when you <b>started</b> the previous delta call (instead of when you completed processing the response or the max of the lastUpdateOn timestamps of the returned records). This will ensure that you do not miss any changes that occurred while you are processing the response from this method",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brandCode",
            "in": "query",
            "description": "The brand for which you need the delta for. If you specify a brand that you do not have access to, you will not get anything back in the response. Do not send this parameter if you need changes for any brand that you have access to",
            "schema": {
              "enum": [
                "C21",
                "CB",
                "ERA",
                "SIR",
                "BHG",
                "CBC",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "The ISO code of the country that the Agent's office is located in",
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Format - int32. This is the maximum number of records that will be returned in one \"page\". A query may return fewer than the value of limit due to filtering. Do not depend on the number of results being fewer than the limit value to indicate your query reached the end of the list of data, use the absence of the \"cursor\" value instead (as described below). Default value is 100. Minimum is 10 and maximum is 1000. Recommended value is not more than 500.",
            "schema": {
              "type": "number",
              "default": 100
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "This is a value generated by this method to keep track of the data to include in subsequent calls (to return additional pages of results). This value will be automatically set in the \"nextLink\" URL returned by the method, so do not attempt to generate and send it yourself. If you generate this parameter value explicitly, you will very likely get a 400 response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad input parameter. Error message should indicate which one and why",
            "content": {
              "application/json": { }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/agents/active": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "GetActiveAgents",
        "description": "Returns the list of Agents who are presently Active. This method can be used to do a first-time initialization of your local data store OR to perform periodic reconciliation of your data store with us. To get details of the Agent, use the GetAgentById method described below. If using this method for the first-time initialization, make sure to call the delta method by passing the timestamp when you started the initialization as the \"since\" parameter value. This will ensure that you get notified of any changes that happen in the time that it took to initialize your local data store",
        "operationId": "getactiveagents",
        "parameters": [
          {
            "name": "brandCode",
            "in": "query",
            "description": "The brand for which you need the data for. If you specify a brand that you do not have access to, you will not get anything back in the response. Do not send this parameter if you need changes for any brand that you have access to",
            "schema": {
              "enum": [
                "C21",
                "CB",
                "ERA",
                "SIR",
                "BHG",
                "CBC",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "The ISO code of the country that the Agent's office is located in",
            "schema": {
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad input parameter. Error message should indicate which one and why",
            "content": {
              "application/json": { }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/agents/{id}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "GetAgentById",
        "description": "Use this method to retrieve details for a particular agent using the Realogy uniqueidentifier. The Realogy identifer is returned by the Delta or the Active methods. If you use IDs obtained from other sources, there is a possibility of getting 404 response",
        "operationId": "getagentbyid",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Realogy uniqueidentifier for the agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "404": {
            "description": "Not Found. Record is no longer active in the system",
            "content": {
              "application/json": { }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/companies/delta": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "GetCompanyDelta",
        "description": "Use this method to retrieve Company records that were added/updated (Upserted) or deleted since a specific time. The response will indicate if a particular Company has been deleted or Upserted and timestamp at which that action occurred. If the Company was Upserted, the response will include all of the available details for it. Results will be paginated, depending on the \"page size\" you specify and the amount of changes that have occurred. Note that the method will not accept a \"since\" time older than a week. The recommended synchronization frequency is every 1 - 4 hours. If your synchronization process is \"broken\" for over a week, use the \"active\" method to re-synchronize before resuming the regular synchronization process",
        "operationId": "getcompanydelta",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). The time from which you need changes from. You should use the format emitted by Date's toJSON method (for example, 2017-04-23T18:25:43.511Z). If a timestamp older than a week is passed, a business rule violation will be thrown which will require the client to change the from date. As a best-practice, for a subsequent call to this method, send the timestamp when you <b>started</b> the previous delta call (instead of when you completed processing the response or the max of the lastUpdateOn timestamps of the returned records). This will ensure that you do not miss any changes that occurred while you are processing the response from this method",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brandCode",
            "in": "query",
            "description": "The brand for which you need the delta for. If you specify a brand that you do not have access to, you will not get anything back in the response. Do not send this parameter if you need changes for any brand that you have access to",
            "schema": {
              "enum": [
                "C21",
                "CB",
                "ERA",
                "SIR",
                "BHG",
                "CBC",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "The ISO code of the country that the Company's office is located in",
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Format - int32. This is the maximum number of records that will be returned in one \"page\". A query may return fewer than the value of limit due to filtering. Do not depend on the number of results being fewer than the limit value to indicate your query reached the end of the list of data, use the absence of the \"cursor\" value instead (as described below). Default value is 100. Minimum is 10 and maximum is 1000. Recommended value is not more than 500.",
            "schema": {
              "type": "number",
              "default": 100
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "This is a value generated by this method to keep track of the data to include in subsequent calls (to return additional pages of results). This value will be automatically set in the \"nextLink\" URL returned by the method, so do not attempt to generate and send it yourself. If you generate this parameter value explicitly, you will very likely get a 400 response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad input parameter. Error message should indicate which one and why",
            "content": {
              "application/json": { }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/companies/active": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "GetActiveCompanies",
        "description": "Returns the list of Companies that are presently Active. This method can be used to do a first-time initialization of your local data store OR to perform periodic reconciliation of your data store with us. To get details of the Company, use the GetCompanyById method described below. If using this method for the first-time initialization, make sure to call the delta method by passing the timestamp when you started the initialization as the \"since\" parameter value. This will ensure that you get notified of any changes that happen in the time that it took to initialize your local data store",
        "operationId": "getactivecompanies",
        "parameters": [
          {
            "name": "brandCode",
            "in": "query",
            "description": "The brand for which you need the data for. If you specify a brand that you do not have access to, you will not get anything back in the response. Do not send this parameter if you need changes for any brand that you have access to",
            "schema": {
              "enum": [
                "C21",
                "CB",
                "ERA",
                "SIR",
                "BHG",
                "CBC",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "The ISO code of the country that the Company's office is located in",
            "schema": {
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad input parameter. Error message should indicate which one and why",
            "content": {
              "application/json": { }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/companies/{id}": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "GetCompanyById",
        "description": "Use this method to retrieve details for a particular Company using the Realogy uniqueidentifier. The Realogy identifer is returned by the Delta or the Active methods. If you use IDs obtained from other sources, there is a possibility of getting 404 response",
        "operationId": "getcompanybyid",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Realogy uniqueidentifier for the Company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "404": {
            "description": "Not Found. Record is no longer active in the system",
            "content": {
              "application/json": { }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/listings/delta": {
      "get": {
        "tags": [
          "Listings"
        ],
        "summary": "GetListingDelta",
        "description": "Use this method to retrieve Listing records that were added/updated (Upserted) or deleted since a specific time. The response will indicate if a particular Listing has been deleted or Upserted and timestamp at which that action occurred. If the Listing was Upserted, the response will include all of the available details for it. Results will be paginated, depending on the \"page size\" you specify and the amount of changes that have occurred. Note that the method will not accept a \"since\" time older than a week. The recommended synchronization frequency is every 1 - 4 hours. If your synchronization process is \"broken\" for over a week, use the \"active\" method to re-synchronize before resuming the regular synchronization process",
        "operationId": "getlistingdelta",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). The time from which you need changes from. You should use the format emitted by Date's toJSON method (for example, 2017-04-23T18:25:43.511Z). If a timestamp older than a week is passed, a business rule violation will be thrown which will require the client to change the from date. As a best-practice, for a subsequent call to this method, send the timestamp when you <b>started</b> the previous delta call (instead of when you completed processing the response or the max of the lastUpdateOn timestamps of the returned records). This will ensure that you do not miss any changes that occurred while you are processing the response from this method",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brandCode",
            "in": "query",
            "description": "The brand for which you need the delta for. If you specify a brand that you do not have access to, you will not get anything back in the response. Do not send this parameter if you need changes for any brand that you have access to",
            "schema": {
              "enum": [
                "C21",
                "CB",
                "ERA",
                "SIR",
                "BHG",
                "CBC",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Use to specify the type of Listings you are interested in. By default, all listing types will be included",
            "schema": {
              "enum": [
                "ForSale",
                "ForRent",
                "ForSaleCommercial",
                "ForLeaseCommercial"
              ],
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "The ISO code of the country that the Property is located in",
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Format - int32. This is the maximum number of records that will be returned in one \"page\". A query may return fewer than the value of limit due to filtering. Do not depend on the number of results being fewer than the limit value to indicate your query reached the end of the list of data, use the absence of the \"cursor\" value instead (as described below). Default value is 100. Minimum is 10 and maximum is 1000. Recommended value is not more than 500.",
            "schema": {
              "type": "number",
              "default": 100
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "This is a value generated by this method to keep track of the data to include in subsequent calls (to return additional pages of results). This value will be automatically set in the \"nextLink\" URL returned by the method, so do not attempt to generate and send it yourself. If you generate this parameter value explicitly, you will very likely get a 400 response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad input parameter. Error message should indicate which one and why",
            "content": {
              "application/json": { }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/listings/active": {
      "get": {
        "tags": [
          "Listings"
        ],
        "summary": "GetActiveListings",
        "description": "Returns the list of Listings that are presently Active. This method can be used to do a first-time initialization of your local data store OR to perform periodic reconciliation of your data store with us. To get details of the Listing, use the GetListingById method described below. If using this method for the first-time initialization, make sure to call the delta method by passing the timestamp when you started the initialization as the \"since\" parameter value. This will ensure that you get notified of any changes that happen in the time that it took to initialize your local data store",
        "operationId": "getactivelistings",
        "parameters": [
          {
            "name": "brandCode",
            "in": "query",
            "description": "The brand for which you need the data for. If you specify a brand that you do not have access to, you will not get anything back in the response. Do not send this parameter if you need changes for any brand that you have access to",
            "schema": {
              "enum": [
                "C21",
                "CB",
                "ERA",
                "SIR",
                "BHG",
                "CBC",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Use to specify the type of Listings you are interested in. By default, all listing types will be included",
            "schema": {
              "enum": [
                "ForSale",
                "ForRent",
                "ForSaleCommercial",
                "ForLeaseCommercial"
              ],
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "The ISO code of the country that the Property is located in",
            "schema": {
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad input parameter. Error message should indicate which one and why",
            "content": {
              "application/json": { }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/listings/{id}": {
      "get": {
        "tags": [
          "Listings"
        ],
        "summary": "GetListingById",
        "description": "Use this method to retrieve details for a particular Listing using the Realogy uniqueidentifier. The Realogy identifer is returned by the Delta or the Active methods. If you use IDs obtained from other sources, there is a possibility of getting 404 response",
        "operationId": "getlistingbyid",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Realogy uniqueidentifier for the Listing",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "404": {
            "description": "Not Found. Record is no longer active in the system",
            "content": {
              "application/json": { }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/offices/delta": {
      "get": {
        "tags": [
          "Offices"
        ],
        "summary": "GetOfficeDelta",
        "description": "Use this method to retrieve Office records that were added/updated (Upserted) or deleted since a specific time. The response will indicate if a particular Office has been deleted or Upserted and timestamp at which that action occurred. If the Office was Upserted, the response will include all of the available details for it. Results will be paginated, depending on the \"page size\" you specify and the amount of changes that have occurred. Note that the method will not accept a \"since\" time older than a week. The recommended synchronization frequency is every 1 - 4 hours. If your synchronization process is \"broken\" for over a week, use the \"active\" method to re-synchronize before resuming the regular synchronization process",
        "operationId": "getofficedelta",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). The time from which you need changes from. You should use the format emitted by Date's toJSON method (for example, 2017-04-23T18:25:43.511Z). If a timestamp older than a week is passed, a business rule violation will be thrown which will require the client to change the from date. As a best-practice, for a subsequent call to this method, send the timestamp when you <b>started</b> the previous delta call (instead of when you completed processing the response or the max of the lastUpdateOn timestamps of the returned records). This will ensure that you do not miss any changes that occurred while you are processing the response from this method",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brandCode",
            "in": "query",
            "description": "The brand for which you need the delta for. If you specify a brand that you do not have access to, you will not get anything back in the response. Do not send this parameter if you need changes for any brand that you have access to",
            "schema": {
              "enum": [
                "C21",
                "CB",
                "ERA",
                "SIR",
                "BHG",
                "CBC",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "The ISO code of the country that the office is located in",
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Format - int32. This is the maximum number of records that will be returned in one \"page\". A query may return fewer than the value of limit due to filtering. Do not depend on the number of results being fewer than the limit value to indicate your query reached the end of the list of data, use the absence of the \"cursor\" value instead (as described below). Default value is 100. Minimum is 10 and maximum is 1000. Recommended value is not more than 500.",
            "schema": {
              "type": "number",
              "default": 100
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "This is a value generated by this method to keep track of the data to include in subsequent calls (to return additional pages of results). This value will be automatically set in the \"nextLink\" URL returned by the method, so do not attempt to generate and send it yourself. If you generate this parameter value explicitly, you will very likely get a 400 response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad input parameter. Error message should indicate which one and why",
            "content": {
              "application/json": { }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/offices/active": {
      "get": {
        "tags": [
          "Offices"
        ],
        "summary": "GetActiveOffices",
        "description": "Returns the list of Offices that are presently Active. This method can be used to do a first-time initialization of your local data store OR to perform periodic reconciliation of your data store with us. To get details of the Office, use the GetOfficeById method described below. If using this method for the first-time initialization, make sure to call the delta method by passing the timestamp when you started the initialization as the \"since\" parameter value. This will ensure that you get notified of any changes that happen in the time that it took to initialize your local data store",
        "operationId": "getactiveoffices",
        "parameters": [
          {
            "name": "brandCode",
            "in": "query",
            "description": "The brand for which you need the data for. If you specify a brand that you do not have access to, you will not get anything back in the response. Do not send this parameter if you need changes for any brand that you have access to",
            "schema": {
              "enum": [
                "C21",
                "CB",
                "ERA",
                "SIR",
                "BHG",
                "CBC",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "The ISO code of the country that the office is located in",
            "schema": {
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad input parameter. Error message should indicate which one and why",
            "content": {
              "application/json": { }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/offices/{id}": {
      "get": {
        "tags": [
          "Offices"
        ],
        "summary": "GetOfficeById",
        "description": "Use this method to retrieve details for a particular Office using the Realogy uniqueidentifier. The Realogy identifer is returned by the Delta or the Active methods. If you use IDs obtained from other sources, there is a possibility of getting 404 response",
        "operationId": "getofficebyid",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Realogy uniqueidentifier for the Office",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "404": {
            "description": "Not Found. Record is no longer active in the system",
            "content": {
              "application/json": { }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/teams/delta": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "GetTeamDelta",
        "description": "Use this method to retrieve Team records that were added/updated (Upserted) or deleted since a specific time. The response will indicate if a particular Team has been deleted or Upserted and timestamp at which that action occurred. If the Team was Upserted, the response will include all of the available details for it. Results will be paginated, depending on the \"page size\" you specify and the amount of changes that have occurred. Note that the method will not accept a \"since\" time older than a week. The recommended synchronization frequency is every 1 - 4 hours. If your synchronization process is \"broken\" for over a week, use the \"active\" method to re-synchronize before resuming the regular synchronization process",
        "operationId": "getteamdelta",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). The time from which you need changes from. You should use the format emitted by Date's toJSON method (for example, 2017-04-23T18:25:43.511Z). If a timestamp older than a week is passed, a business rule violation will be thrown which will require the client to change the from date. As a best-practice, for a subsequent call to this method, send the timestamp when you <b>started</b> the previous delta call (instead of when you completed processing the response or the max of the lastUpdateOn timestamps of the returned records). This will ensure that you do not miss any changes that occurred while you are processing the response from this method",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brandCode",
            "in": "query",
            "description": "The brand for which you need the delta for. If you specify a brand that you do not have access to, you will not get anything back in the response. Do not send this parameter if you need changes for any brand that you have access to",
            "schema": {
              "enum": [
                "C21",
                "CB",
                "ERA",
                "SIR",
                "BHG",
                "CBC",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "The ISO code of the country that the Team's office is located in",
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Format - int32. This is the maximum number of records that will be returned in one \"page\". A query may return fewer than the value of limit due to filtering. Do not depend on the number of results being fewer than the limit value to indicate your query reached the end of the list of data, use the absence of the \"cursor\" value instead (as described below). Default value is 100. Minimum is 10 and maximum is 1000. Recommended value is not more than 500.",
            "schema": {
              "type": "number",
              "default": 100
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "This is a value generated by this method to keep track of the data to include in subsequent calls (to return additional pages of results). This value will be automatically set in the \"nextLink\" URL returned by the method, so do not attempt to generate and send it yourself. If you generate this parameter value explicitly, you will very likely get a 400 response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad input parameter. Error message should indicate which one and why",
            "content": {
              "application/json": { }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/teams/active": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "GetActiveTeams",
        "description": "Returns the list of Teams that are presently Active. This method can be used to do a first-time initialization of your local data store OR to perform periodic reconciliation of your data store with us. To get details of the Team, use the GetTeamById method described below. If using this method for the first-time initialization, make sure to call the delta method by passing the timestamp when you started the initialization as the \"since\" parameter value. This will ensure that you get notified of any changes that happen in the time that it took to initialize your local data store",
        "operationId": "getactiveteams",
        "parameters": [
          {
            "name": "brandCode",
            "in": "query",
            "description": "The brand for which you need the data for. If you specify a brand that you do not have access to, you will not get anything back in the response. Do not send this parameter if you need changes for any brand that you have access to",
            "schema": {
              "enum": [
                "C21",
                "CB",
                "ERA",
                "SIR",
                "BHG",
                "CBC",
                "ZIP"
              ],
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "The ISO code of the country that the Team's office is located in",
            "schema": {
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad input parameter. Error message should indicate which one and why",
            "content": {
              "application/json": { }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/teams/{id}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "GetTeamById",
        "description": "Use this method to retrieve details for a particular Team using the Realogy uniqueidentifier. The Realogy identifer is returned by the Delta or the Active methods. If you use IDs obtained from other sources, there is a possibility of getting 404 response",
        "operationId": "getteambyid",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "404": {
            "description": "Not Found. Record is no longer active in the system",
            "content": {
              "application/json": { }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "apiKeyHeader": {
        "type": "apiKey",
        "name": "Ocp-Apim-Subscription-Key",
        "in": "header"
      },
      "apiKeyQuery": {
        "type": "apiKey",
        "name": "subscription-key",
        "in": "query"
      }
    }
  },
  "security": [
    {
      "apiKeyHeader": [ ]
    },
    {
      "apiKeyQuery": [ ]
    }
  ],
  "x-ms-export-notes": [
    "The exported API contains schemas that aren't of content type 'application/vnd.oai.openapi.components+json', and are hence not exported as OpenAPI components."
  ]
}